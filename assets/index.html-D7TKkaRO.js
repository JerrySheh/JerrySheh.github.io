import{_ as r,c as o,f as t,o as a}from"./app-D22ydJtp.js";const s="/images/docker.jpg",n="/images/vm_vs_docker.png",c="/images/engine-components-flow.png",i="/images/architecture.jpg",d="/images/docker_helloworld.png",p="/images/docker_interactive.png",l={};function h(k,e){return a(),o("div",null,e[0]||(e[0]=[t('<p><img src="'+s+'" alt="docker"></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>很早之前就听过 Docker 这个名词，知道大概是类似于VM（虚拟机）但又比VM更好的一种新技术，但一直觉得这玩意离我太远。直至在一次又一次地折腾本地虚拟机、云服务器（从VPS到微软云到腾讯云），一次一次地搞崩重新安装之后，我突然想起 Docker 这玩意来，于是这一次决定一探究竟。<strong>作为一名开发者，还是不要太拒绝新东西</strong>。</p><h1 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 Docker</span></a></h1><p>知乎上有一个高赞回答通俗地解释了 <a href="https://www.zhihu.com/question/28300645/answer/67707287" target="_blank" rel="noopener noreferrer">Docker 是什么</a>，我的理解是，一台大型服务器（云计算机器）可以看成是一艘大货轮，计算资源就是货轮的荷载。而 Docker 是集装箱，我们只需要把我们的应用规整地打包到集装箱里面，这样我们就无需关心集装箱外部的环境了（一个应用在 Ubuntu 下部署和在 CentOs 下部署配置往往不同，而 Docker 屏蔽了这些不同）。这样，当换一艘货轮，我们只要把集装箱迁走，而不需要对货物进行拆卸重组，省时省力。</p><p>在初步理解 Docker 概念的时候，看到国外的一篇文章<a href="https://rominirani.com/docker-use-cases-ca12afba75b0" target="_blank" rel="noopener noreferrer">Docker Use Cases</a>（<a href="https://blog.csdn.net/qq_37788081/article/details/79044119" target="_blank" rel="noopener noreferrer">中文翻译</a>），里面提到，<strong>Docker 是一个便携的应用容器</strong>。我们可以在 Docker 里面运行几乎任何 Linux 应用，数据库、Node.js服务、Web服务等等。<strong>Docker 并不在乎你的应用程序是什么、做什么，Docker 提供了一组应用打包、传输和部署的方法，以便你能更好地在容器内运行任何应用。</strong></p><h1 id="docker用在哪里" tabindex="-1"><a class="header-anchor" href="#docker用在哪里"><span>Docker用在哪里？</span></a></h1><h2 id="快速搭建环境-尝试新软件" tabindex="-1"><a class="header-anchor" href="#快速搭建环境-尝试新软件"><span>快速搭建环境，尝试新软件</span></a></h2><p>很多新技术要去使用前可能要搭建环境并测试，而 Docker 让你用一条命令搭建好特定的环境。比如，Docker 只需要一条命令便可以运行 MySQL 数据库：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker run -d -p 3306:3306 tutum/mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>普通用户大概需要一天的时间去搭建 Gitlab 平台，而 Docker 则只需要一条命令。</p><h2 id="避免-我机器上可以运行" tabindex="-1"><a class="header-anchor" href="#避免-我机器上可以运行"><span>避免“我机器上可以运行”</span></a></h2><p>有时候一个项目，在开发电脑上运行得好好的，到测试机器或生产环境就会出现各种各样的问题（通常是环境和依赖问题）。Docker 镜像并不会因为环境的变化而不能运行，也不会在不同的电脑上有不同的运行结果。可以给测试人员提交含有应用的 Docker 镜像，这样便不再会发生“在我机器上是可以运行的”这种事情。</p><h1 id="虚拟机和-docker-的区别" tabindex="-1"><a class="header-anchor" href="#虚拟机和-docker-的区别"><span>虚拟机和 Docker 的区别</span></a></h1><p>StackOverFlow 有一个问答 <a href="https://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-virtual-machine" target="_blank" rel="noopener noreferrer">How is Docker different from a virtual machine? [closed] </a> 解释了 VM 和 Docker 的区别。其中最重要的一点是，Docker用了 runC(libcontainer) 技术，让运行在 Docker 中的应用能够在共享操作系统上的资源。例如，假如我们有 1GB 的容器镜像要跑在5台机器上，如果我们用5台虚拟机，就分别需要5个1GB。而使用 Docker，仍然只需要1GB因为它们共享了操作系统资源。</p><p>下面这张图片介绍了 VM 和 Docker 的区别：</p><p><img src="'+n+'" alt="vm_vs_docker"></p><h1 id="docker-架构" tabindex="-1"><a class="header-anchor" href="#docker-架构"><span>Docker 架构</span></a></h1><p>Docker的引擎结构：</p><p><img src="'+c+'" alt="vm_vs_docker"></p><p>Docker的架构：</p><p><img src="'+i+'" alt=""></p><h2 id="docker-核心概念" tabindex="-1"><a class="header-anchor" href="#docker-核心概念"><span>Docker 核心概念</span></a></h2><ul><li><strong>镜像（image）</strong>：包含完整的操作系统环境，类似于我们在微软官网或者Ubuntu官网下载的 .iso 系统镜像文件。只不过，Docker 的镜像里面包含了配置好的应用，并且是轻量级的。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</li><li><strong>仓库(repository)</strong>：集中存放镜像文件的场所。有专门的仓库注册服务器（Registry），存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。<strong>仓库类似于 git，而仓库注册服务器类似于 github</strong>。</li><li><strong>容器(container)</strong>：容器是从镜像创建的运行实例，可以对容器进行启动、删除、开始、停止。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</li></ul><p>详细可参阅<a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener noreferrer">Docker官方文档</a>。</p><h1 id="docker-安装" tabindex="-1"><a class="header-anchor" href="#docker-安装"><span>Docker 安装</span></a></h1><p>到 <a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">docker官网</a> 下载对应系统的 docker 安装程序。用 Windows 开发，下载<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener noreferrer"> Docker Desktop (Windows)</a>。<strong>注意：Docker 需要 Hyper-V，因而只有专业版 Windows 10 才能正常安装，但是家庭版也能绕过，如果很不幸你是家庭版，参考<a href="https://www.jianshu.com/p/1329954aa329" target="_blank" rel="noopener noreferrer">这篇文章</a></strong>。安装过程参考官网：https://hub.docker.com/editions/community/docker-ce-desktop-windows</p><p>安装完毕后，打开任意终端，输入</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>看到版本信息，即安装成功。</p><h1 id="运行-docker-应用" tabindex="-1"><a class="header-anchor" href="#运行-docker-应用"><span>运行 Docker 应用</span></a></h1><p>把 Docker 想象成虚拟机，你可以在 Docker 里面运行任何应用。</p><p>例如，在win10 Powershell 或 CMD 输入：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker run ubuntu:16.04 /bin/echo &quot;hello world&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>意思是，在 ubuntu:16.04 的环境下（尽管你现在在用着Windows），运行 <code>/bin/echo</code> 这个程序，<code>echo</code> 在linux系统里是输出文字，这里我们输出<code>hello world</code>。</p><p><img src="'+d+'" alt="docker_helloworld"></p><p>可以看到，我们电脑上没有 ubuntu:16.04 镜像，于是 docker 自动从网上拉取，完成后执行我们的程序。</p><p>用以下命令来交互式：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker run -i -t ubuntu:16.04 /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>-i</strong>:允许你对容器内的标准输入 (STDIN) 进行交互。</li><li><strong>-t</strong>:在新容器内指定一个伪终端或终端。</li></ul><p>现在，我们跟得到了一个真实的 ubuntu 系统一样，可以命令行操作。这太酷了吧！</p><p><img src="'+p+'" alt="docker_interactive.png"></p><hr><h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>docker-compose</span></a></h1><p>docker-compose 是一个用来把 docker 自动化的东西。有了 docker-compose ，你可以把所有繁复的 docker 操作全都一条命令，自动化的完成。</p><p>参考：</p><ul><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li><li><a href="https://blog.csdn.net/itguangit/article/details/80222387" target="_blank" rel="noopener noreferrer">CSDN</a></li></ul>',47)]))}const g=r(l,[["render",h],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/article/ynp25k6o/","title":"Docker探索","lang":"zh-CN","frontmatter":{"title":"Docker探索","categories":["技能","Docker"],"tags":["Docker"],"abbrlink":"b1f3af76","createTime":"2019/01/13 23:18:46","permalink":"/article/ynp25k6o/","description":"docker 前言 很早之前就听过 Docker 这个名词，知道大概是类似于VM（虚拟机）但又比VM更好的一种新技术，但一直觉得这玩意离我太远。直至在一次又一次地折腾本地虚拟机、云服务器（从VPS到微软云到腾讯云），一次一次地搞崩重新安装之后，我突然想起 Docker 这玩意来，于是这一次决定一探究竟。作为一名开发者，还是不要太拒绝新东西。 什么是 D...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/ynp25k6o/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"Docker探索"}],["meta",{"property":"og:description","content":"docker 前言 很早之前就听过 Docker 这个名词，知道大概是类似于VM（虚拟机）但又比VM更好的一种新技术，但一直觉得这玩意离我太远。直至在一次又一次地折腾本地虚拟机、云服务器（从VPS到微软云到腾讯云），一次一次地搞崩重新安装之后，我突然想起 Docker 这玩意来，于是这一次决定一探究竟。作为一名开发者，还是不要太拒绝新东西。 什么是 D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/docker.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker探索\\",\\"image\\":[\\"https://jerrysheh.com/images/docker.jpg\\",\\"https://jerrysheh.com/images/vm_vs_docker.png\\",\\"https://jerrysheh.com/images/engine-components-flow.png\\",\\"https://jerrysheh.com/images/architecture.jpg\\",\\"https://jerrysheh.com/images/docker_helloworld.png\\",\\"https://jerrysheh.com/images/docker_interactive.png\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"快速搭建环境，尝试新软件","slug":"快速搭建环境-尝试新软件","link":"#快速搭建环境-尝试新软件","children":[]},{"level":2,"title":"避免“我机器上可以运行”","slug":"避免-我机器上可以运行","link":"#避免-我机器上可以运行","children":[]},{"level":2,"title":"Docker 核心概念","slug":"docker-核心概念","link":"#docker-核心概念","children":[]}],"readingTime":{"minutes":5.19,"words":1556},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/skill/docker/Docker探索.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"8dc06f","sort":10013,"name":"skill"},{"id":"f589d2","sort":10024,"name":"docker"}]}');export{g as comp,u as data};
