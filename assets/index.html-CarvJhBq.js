import{_ as e,c as l,f as a,a as t,b as i,d as h,e as p,r as k,o as d}from"./app-D22ydJtp.js";const r="/images/ADT.png",c={};function o(g,s){const n=k("font");return d(),l("div",null,[s[3]||(s[3]=a('<p>在开始谈数据结构之前，先聊一聊什么是<code>数据抽象</code>和<code>抽象数据类型（ADT）</code>。</p><h1 id="数据抽象和抽象数据类型" tabindex="-1"><a class="header-anchor" href="#数据抽象和抽象数据类型"><span>数据抽象和抽象数据类型</span></a></h1><h2 id="数据抽象" tabindex="-1"><a class="header-anchor" href="#数据抽象"><span>数据抽象</span></a></h2><p>数据类型是指 <strong>一组值</strong> 和 <strong>一组对这些值的操作</strong> 的集合，Java中有多种 <strong>原始数据类型</strong>，如<code>int</code> 。<code>int</code> 是 <code>-2^31</code> 到 <code>2^31 - 1</code> 之间的这些整数值，以及加、减、乘、除等这些操作的集合。</p><p>理论上所有程序只需要使用这些原始数据类型(int double char等)即可，但如果我们能把原始数据类型抽象成更高级的数据类型（string queue stack等），无疑会更加方便程序的编写。</p><blockquote><p><code>2^31-1</code> 是 <code>2147483647</code> ，21.4亿。</p></blockquote>',6)),t("p",null,[s[1]||(s[1]=i("我们把定义和使用我们自己的数据类型的这个过程，叫做")),h(n,{color:"red"},{default:p(()=>s[0]||(s[0]=[i("数据抽象")])),_:1}),s[2]||(s[2]=i("。"))]),s[4]||(s[4]=a('<h2 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型"><span>抽象数据类型</span></a></h2><p><strong>抽象数据类型（ADT）</strong> 是一种能够对使用者隐藏数据表示的数据类型。它将数据和函数的实现关联，并将数据的表示方式隐藏起来。<strong>我们在使用抽象数据类型时，主要关注如何操作而不关心数据本身是怎么表示的</strong>。也就是说，使用一个抽象数据类型，并不需要了解其实现细节。</p><p><img src="'+r+`" alt="ADT"></p><hr><h1 id="三种简单的集合类数据类型" tabindex="-1"><a class="header-anchor" href="#三种简单的集合类数据类型"><span>三种简单的集合类数据类型</span></a></h1><h2 id="背包" tabindex="-1"><a class="header-anchor" href="#背包"><span>背包</span></a></h2><p>背包是一种不支持从中删除元素的集合数据类型。它主要用于帮助用例收集元素，然后遍历这些的元素。这些元素没有顺序。</p><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h2><p>队列是一种先进先出（FIFO）策略的集合类型。</p><h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h2><p>栈是一种后进先出（LIFO）策略的集合类型。栈的应用非常广泛，例如几乎每个编辑器都有的Undo操作（撤销）、操作系统中的程序调用栈、括号/符号匹配等等。</p><h3 id="栈的典型应用" tabindex="-1"><a class="header-anchor" href="#栈的典型应用"><span>栈的典型应用</span></a></h3><ol><li>逆序输出（十进制转其他进制）</li><li>括号匹配</li></ol><blockquote><p>Dijkstra双栈算式表达式求值法，将操作数和运算符分别放入两个栈中，遇到左括号“（” 则忽略，遇到操作数则将操作数压入栈1中，遇到运算符将它压入栈2中，遇到右括号，则弹出运算符和操作数，计算结果后重新压入栈中。</p></blockquote><h3 id="如何用两个栈实现一个队列" tabindex="-1"><a class="header-anchor" href="#如何用两个栈实现一个队列"><span>如何用两个栈实现一个队列？</span></a></h3><p>添加时往A栈添加。删除时，先判断B栈是否为空，如果非空，直接从B栈取出最顶元素删除，如果为空，先把A栈里的元素全部倒入B栈中，然后删除最顶元素。</p><h2 id="什么是对象的游离" tabindex="-1"><a class="header-anchor" href="#什么是对象的游离"><span>什么是对象的游离</span></a></h2><p>在一个栈中，当我们使用<code>pop()</code>弹栈的时候，被弹出的元素我们再也不需要用到它了。但它的引用还存在于数组中。这种情况就称为游离。在 Java 中，避免对象游离很容易，只需将其设为 null 即可。这样系统（Java垃圾回收策略）就可以在使用完后将其回收。</p><hr><h1 id="算法的复杂度分析" tabindex="-1"><a class="header-anchor" href="#算法的复杂度分析"><span>算法的复杂度分析</span></a></h1><p>在讨论数据结构和算法时，我们通常用算法的复杂度来描述一个算法的好坏，复杂度包括：<strong>时间复杂度</strong> 和 <strong>空间复杂度</strong>。计算机本质上是一个状态机，内存里的数据构成了当前的状态，CPU利用当前的状态计算出下一个状态。所谓的空间复杂度就是为了支持你的计算所必需存储的状态最多有多少，所谓时间复杂度就是从初始状态到达最终状态中间需要多少步！</p><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h2><p>算法的时间复杂度，也就是算法的时间量度，记作：<code>T(n) = O(f(n))</code>。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称为算法的渐近时间复杂度，<strong>简称为时间复杂度</strong>。其中 f(n) 是规模 n 的某个函数。</p><h3 id="如何推导时间复杂度" tabindex="-1"><a class="header-anchor" href="#如何推导时间复杂度"><span>如何推导时间复杂度</span></a></h3><ol><li>用常数 1 取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项。</li><li>如果最高阶项存在，且不是 1 ，则去除与这个项相乘的常数。</li></ol><p>例如:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sum </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 执行 1 次</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sum </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 执行 1 次</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 执行 1 次</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个算法的运行次数函数是 <code>f(n) = 3</code>。根据推导规则，第一步把常数项 3 改为 1。第二步保留最高阶项，它没有最高阶项，所以这个算法的时间复杂度为 <code>T(n) = O(1)</code>。</p><h4 id="常数阶" tabindex="-1"><a class="header-anchor" href="#常数阶"><span>常数阶</span></a></h4><p>当 n = 1 时，算法执行次数为 3， 当 n = 100 时，算法的执行次数还是 3，所以我们可以看出这个算法的执行次数与 n 的规模没关系。我们把这种与问题的大小（n 的大小）无关，执行时间恒定的算法，叫作常数阶。</p><h4 id="线性阶" tabindex="-1"><a class="header-anchor" href="#线性阶"><span>线性阶</span></a></h4><p>下面这段代码的时间复杂度为 <code>T(n) = O(n)</code>，因为循环体中的代码必须要执行 n 次。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /* 时间复杂度为 O(1) 的程序步骤序列 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对数阶" tabindex="-1"><a class="header-anchor" href="#对数阶"><span>对数阶</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">count </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    count </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> count </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /* 时间复杂度为 O(1) 的程序步骤序列 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于每次 count 乘以 2 以后，就越来越接近于 n，也就是说有多少个 2 相乘后大于 n，则会退出循环。由<code> 2^x = n</code> 得到 <code> x = log2n</code>。所以这个算法的时间复杂度为 <code>T(n) = O(logn)</code>。</p><h4 id="平方阶" tabindex="-1"><a class="header-anchor" href="#平方阶"><span>平方阶</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 例1</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        /* 时间复杂度为 O(1) 的程序步骤序列 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 例2</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j， m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        /* 时间复杂度为 O(1) 的程序步骤序列 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 例1 中内循环时间复杂度为<code>O(n)</code>，而对于外层的循环，不过是这个内循环再循环 n 次。所以这段代码的时间复杂度为 <code>O(n^2)</code>。</p><p>在 例2 中，时间复杂度就变为 O(m^n)</p><h3 id="常见的时间复杂度耗费时间" tabindex="-1"><a class="header-anchor" href="#常见的时间复杂度耗费时间"><span>常见的时间复杂度耗费时间</span></a></h3><p>从小到大依次是：</p><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度"><span>空间复杂度</span></a></h2><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>S(n) = O(f(n))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 n 为问题的规模，<code>f(n)</code>为语句关于 n 所占存储空间的函数。</p><ul><li>参考：<a href="https://www.jianshu.com/p/d72d4c9e90c6" target="_blank" rel="noopener noreferrer">程序猿必修课之数据结构（二）算法和算法的复杂度</a></li></ul><h2 id="复杂度分析的主要方法" tabindex="-1"><a class="header-anchor" href="#复杂度分析的主要方法"><span>复杂度分析的主要方法</span></a></h2><ol><li><strong>迭代</strong>：级数求和</li><li><strong>递归</strong>：递归跟踪 + 递推方程</li></ol><p>猜测 + 验证</p>`,51))])}const A=e(c,[["render",o],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/data-structure/leu82fhp/","title":"数据结构（一）数据抽象和算法复杂度分析","lang":"zh-CN","frontmatter":{"title":"数据结构（一）数据抽象和算法复杂度分析","categories":"数据结构和算法","tags":["数据结构和算法"],"abbrlink":"a7047cb5","createTime":"2017/11/23 23:06:46","permalink":"/data-structure/leu82fhp/","description":"在开始谈数据结构之前，先聊一聊什么是数据抽象和抽象数据类型（ADT）。 数据抽象和抽象数据类型 数据抽象 数据类型是指 一组值 和 一组对这些值的操作 的集合，Java中有多种 原始数据类型，如int 。int 是 -2^31 到 2^31 - 1 之间的这些整数值，以及加、减、乘、除等这些操作的集合。 理论上所有程序只需要使用这些原始数据类型(int...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/data-structure/leu82fhp/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"数据结构（一）数据抽象和算法复杂度分析"}],["meta",{"property":"og:description","content":"在开始谈数据结构之前，先聊一聊什么是数据抽象和抽象数据类型（ADT）。 数据抽象和抽象数据类型 数据抽象 数据类型是指 一组值 和 一组对这些值的操作 的集合，Java中有多种 原始数据类型，如int 。int 是 -2^31 到 2^31 - 1 之间的这些整数值，以及加、减、乘、除等这些操作的集合。 理论上所有程序只需要使用这些原始数据类型(int..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/ADT.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"数据结构和算法"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构（一）数据抽象和算法复杂度分析\\",\\"image\\":[\\"https://jerrysheh.com/images/ADT.png\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数据抽象","slug":"数据抽象","link":"#数据抽象","children":[]},{"level":2,"title":"抽象数据类型","slug":"抽象数据类型","link":"#抽象数据类型","children":[]},{"level":2,"title":"背包","slug":"背包","link":"#背包","children":[]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[{"level":3,"title":"栈的典型应用","slug":"栈的典型应用","link":"#栈的典型应用","children":[]},{"level":3,"title":"如何用两个栈实现一个队列？","slug":"如何用两个栈实现一个队列","link":"#如何用两个栈实现一个队列","children":[]}]},{"level":2,"title":"什么是对象的游离","slug":"什么是对象的游离","link":"#什么是对象的游离","children":[]},{"level":2,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[{"level":3,"title":"如何推导时间复杂度","slug":"如何推导时间复杂度","link":"#如何推导时间复杂度","children":[]},{"level":3,"title":"常见的时间复杂度耗费时间","slug":"常见的时间复杂度耗费时间","link":"#常见的时间复杂度耗费时间","children":[]}]},{"level":2,"title":"空间复杂度","slug":"空间复杂度","link":"#空间复杂度","children":[]},{"level":2,"title":"复杂度分析的主要方法","slug":"复杂度分析的主要方法","link":"#复杂度分析的主要方法","children":[]}],"readingTime":{"minutes":5.96,"words":1788},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/data-structure/1.数据结构（一）数据抽象和算法复杂度分析.md"}');export{A as comp,u as data};
