import{_ as i,c as n,f as a,o as e}from"./app-D22ydJtp.js";const l={};function p(t,s){return e(),n("div",null,s[0]||(s[0]=[a(`<p>这几天在接触一些C语言的项目，发现自己对C语言，包括C++的知识理解不透彻，尤其是指针。导致项目完全看不懂。因此这一篇就来补补C/C++中指针的知识。</p><p>参考书籍《C++ Primer》</p><hr><h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h1><h2 id="简单比喻" tabindex="-1"><a class="header-anchor" href="#简单比喻"><span>简单比喻</span></a></h2><p>什么是指针，假如你住5楼503号房间。那么有一张纸条，纸条上写着5楼503。那么，我们就说这张纸条就是指向你房间的一个指针。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>指针（Pointer）是指向（Point to）另外一种类型的复合类型。</p><p>指针有两个特点：</p><ul><li>本身是一个对象，允许对指针进行赋值和拷贝，而且在指针的生命周期内可以先后指向几个不同的对象。</li><li>无须在定义时赋初始值</li></ul><h2 id="一个简单例子" tabindex="-1"><a class="header-anchor" href="#一个简单例子"><span>一个简单例子</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    int ival = 42;</span></span>
<span class="line"><span>    int *p = &amp;ival;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    printf(&quot;p是一个指针，P为%p\\n&quot;,p);</span></span>
<span class="line"><span>    printf(&quot;*p是指针指向的变量，*p为%d\\n&quot;,*p);</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>p是一个指针，P为0x7ffe09031b1c</span></span>
<span class="line"><span>*p是指针指向的变量，*p为42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们用 <code>int *p</code>来定义指针，这时候<code>p</code>是一个指针。<code>&amp;ival</code>的意思是取<code>int</code>型变量<code>ival</code>的地址。</p><p>而在输出的时候，<code>*p</code>是指针指向的变量，也就是说，<code>*</code>号在这里成了解引用符号。仅在指针确实指向了某个对象，即指针确实有效的情况下，<code>*p</code>才适用。</p><blockquote><p>理解的关键：在定义阶段， 用<code>int *p</code>用来定义指针。在操作阶段，<code>*p</code>是解引用。</p></blockquote><h2 id="空指针" tabindex="-1"><a class="header-anchor" href="#空指针"><span>空指针</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int *p1 = nullptr; // only C++11</span></span>
<span class="line"><span>int *p2 = 0;       // ok</span></span>
<span class="line"><span>int *p3 = NULL;    // include cstdlib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种方法仅在C++11中可用，也是C++编程中最推荐的；第二种是最常见的，直接给指针赋值0，即是空指针；第三种 NULL 在 cstdlib 中定义，其实 NULL 的值就是0；</p><p>假设p是一个指针，那么以下做法是错误的，即使zero等于0：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int zero = 0;</span></span>
<span class="line"><span>p = zero;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一个编程建议是，指针一定要初始化，最好是先有对象（变量），然后再去定义指向这个对象的指针。假设真的要在定义对象前定义指针，不知道让它指向哪里，那就初始化为0或者nullptr。不要让它悬空。</p></blockquote><h2 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h2><p>有时候我们会搞混究竟是改变了指针本身，还是改变了指针指向的对象。一个好方法是，<strong>改变的永远是等号左边的</strong>。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>pi = &amp;val;    // 指针指向了val的地址</span></span>
<span class="line"><span>*pi = 0;      // 指针没变，但是指针指向的对象值变为0了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="void-指针" tabindex="-1"><a class="header-anchor" href="#void-指针"><span>void* 指针</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>double mynum = 3.66;</span></span>
<span class="line"><span>double *pd = &amp;mynum;  // pa指向mynum</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int mynum2 = 9;</span></span>
<span class="line"><span>void *pv = &amp;mynum2;  // pv指向mynum2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pv = &amp;mynum1;    // pv现在又指向mynum1了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的例子可以看到， <code>void *</code>型指针跟普通指针也没什么区别。但是，<code>void *</code>指针可以指向任何类型。当然，它不能用于操作指针所指的对象，因为我们不知道这个对象的类型（<code>void *</code>一会儿可指向int型变量的地址，一会儿可以指向double型）</p><h2 id="指向指针的指针" tabindex="-1"><a class="header-anchor" href="#指向指针的指针"><span>指向指针的指针</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    int val = 1024;  // 一个int</span></span>
<span class="line"><span>    int *pi = &amp;val;  // 一个指向val的指针</span></span>
<span class="line"><span>    int **ppi = &amp;pi; // 一个指向pi的指针</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    printf(&quot;1) val是一个int，值为%d\\n\\n&quot;, val);</span></span>
<span class="line"><span>    printf(&quot;2) pi是一个指向int的指针，pi为%p\\n\\n&quot;,pi);</span></span>
<span class="line"><span>    printf(&quot;3) ppi是一个指向指针的指针，ppi为%p\\n&quot;,ppi);</span></span>
<span class="line"><span>    printf(&quot;4) *ppi其实就是 2) 中的pi,*ppi为%p&quot;,*ppi);</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不要被**ppi 吓到了，其实它就是指向了pi这个对象。只不过恰好pi这个对象也是一个指针罢了。</p><p>输出：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1) val是一个int，值为1024</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2) pi是一个指向int的指针，pi为0x7ffc86a9d6b4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3) ppi是一个指向指针的指针，ppi为0x7ffc86a9d6b8</span></span>
<span class="line"><span>4) *ppi其实就是 2) 中的pi,*ppi为0x7ffc86a9d6b4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到， <code>*ppi</code>其实就是<code>pi</code>，他们都是0x7ffc86a9d6b4</p><h2 id="指向常量的指针" tabindex="-1"><a class="header-anchor" href="#指向常量的指针"><span>指向常量的指针</span></a></h2><p>C语言中的<code>const</code>限定了对象不能被改变，一把用来表示常量。相当于 java 的 <code>final</code>。</p><p>而指向常量的指针（point to const），不能用于改变其所指对象的值。point to const一般用来存放常量的地址。</p><p>有一点值得注意，允许一个指向常量的指针指向非常量，但是却不能通过这个指针操作这个非常量。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>const double d = 3.33;</span></span>
<span class="line"><span>const double *pd = &amp;d;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>double x = 6.66;</span></span>
<span class="line"><span>pd = &amp;x;   // ok，但是不能通过pd去改变 x 的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常量指针" tabindex="-1"><a class="header-anchor" href="#常量指针"><span>常量指针</span></a></h2><p>指针是对象，跟int、double等一样，所以可以用 <code>const int</code>来表示常量， 那当然也可以用 <code>*const int</code>来表示常量指针啦。</p><p>只是，一旦定义了<code>*const int</code>，那这个指针必须初始化，且只能指向初始化的这个地方，不能再改变了。</p><p>注意下面的定义</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //常量指针，不能改变p1所指的对象</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见的定义" tabindex="-1"><a class="header-anchor" href="#常见的定义"><span>常见的定义</span></a></h2><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 指针可以被修改，值也可以被修改</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 指针可以被修改，值不可以被修改（const int）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 指针不可以被修改（* const），值可以被修改</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p3 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 指针不可以被修改，值也不可以被修改</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p4 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>摘自 <a href="https://github.com/changgyhub/leetcode_101" target="_blank" rel="noopener noreferrer">《Leetcode 101》</a></p><hr><h1 id="p-mem-是什么意思" tabindex="-1"><a class="header-anchor" href="#p-mem-是什么意思"><span>p-&gt;mem 是什么意思</span></a></h1><p>有时候我们会看到 <code>p-&gt;mem</code> 这种用法，实际上它等价于 <code>(*p).mem</code>。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    typedef struct {</span></span>
<span class="line"><span>        int x;</span></span>
<span class="line"><span>        int y;</span></span>
<span class="line"><span>    } Point;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Point pos;</span></span>
<span class="line"><span>    pos.x = 10;</span></span>
<span class="line"><span>    pos.y = 5;</span></span>
<span class="line"><span>    printf(&quot;answer1:%d\\n&quot;, pos.x * pos.y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Point* pPos = &amp;pos;</span></span>
<span class="line"><span>    (*pPos).x = 15;</span></span>
<span class="line"><span>    pPos-&gt;y = 20;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    printf(&quot;answer2:%d\\n&quot;, pos.x * pos.y);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>answer1:50</span></span>
<span class="line"><span>answer2:300</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义了一个<code>Point</code>结构体，包含 int 类型的 x, y。然后实例化·</p><p>我们当然可以用<code>pos.x = 10</code>，<code>pos.y = 5</code>这样的方式来给结构体的每个变量赋值。</p><p>但有时候我们要用指针操作对象，我们可以先定义一个<code>Point *</code>类型的指针<code>pPos</code>。</p><p>然后查看两种用指针间接给结构体赋值的方法：</p><ol><li>(*pPos).x = 15;</li><li>pPos-&gt;y = 20;</li></ol><p>第一种是先将指针 <code>pPos</code> 解引用，让它变成指向的对象（<code>pos</code>）， 然后用 对象.成员 的方式来赋值。第二种直接在指针<code>pPos</code>上操作，也就是用<code>-&gt;</code>来表示，对指针指向的结构体对象（<code>pos</code>）的某个成员(<code>y</code>)进行操作。</p><p>换言之，</p><ul><li><code>.</code> 直接成员访问操作符，但操作前需对指针解引用</li><li><code>-&gt;</code> 间接成员访问操作符</li></ul><p>实质上两种方式是等价的。</p><hr><h1 id="结构体和指针" tabindex="-1"><a class="header-anchor" href="#结构体和指针"><span>结构体和指针</span></a></h1><h2 id="定义结构体" tabindex="-1"><a class="header-anchor" href="#定义结构体"><span>定义结构体</span></a></h2><p>在C语言中，我们可以这样定义结构体：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//方法一：</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    short</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MAXNAME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> phoneNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> student s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // s1是student类型的一个实例</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//方法二：</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    short</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MAXNAME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> phoneNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">STUDENT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">STUDENT s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // s2是student类型的一个实例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，用方法二比较方便一点。</p><h2 id="用指针访问结构体成员" tabindex="-1"><a class="header-anchor" href="#用指针访问结构体成员"><span>用指针访问结构体成员</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>typedef struct{</span></span>
<span class="line"><span>    short age;</span></span>
<span class="line"><span>    char name[MAXNAME];</span></span>
<span class="line"><span>    long phoneNumber;</span></span>
<span class="line"><span>}STUDENT;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>STUDENT s2; // s2是student类型的一个实例</span></span>
<span class="line"><span></span></span>
<span class="line"><span>student *ps = &amp;s2;</span></span>
<span class="line"><span>ps-&gt;age = 6;</span></span>
<span class="line"><span>printf(&quot;%d\\n&quot;,s2.age);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要给结构体的 name[MAXNAME] 赋值，下面的做法是错误的</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ps</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">jerry</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>应该用strcpy函数。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>char *name = &quot;jerry&quot;;</span></span>
<span class="line"><span>strcpy(ps-&gt;name, name);</span></span>
<span class="line"><span>printf(&quot;%s\\n&quot;,stu1.name);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体偏移量问题" tabindex="-1"><a class="header-anchor" href="#结构体偏移量问题"><span>结构体偏移量问题</span></a></h2><p>假设现在有一个结构体</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>struct fun{</span></span>
<span class="line"><span>    int a;</span></span>
<span class="line"><span>    int b;</span></span>
<span class="line"><span>    char c;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已知道结构体成员 c 的地址，如何求结构体的起始地址呢？</p><p>答案就是：<code>(char *) &amp; ((struct fun*)0)-&gt;c</code></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int main(){</span></span>
<span class="line"><span>    //实例化一个结构体变量</span></span>
<span class="line"><span>    struct fun domain;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //结构体起始地址</span></span>
<span class="line"><span>    printf(&quot;iic:%u\\n&quot;,&amp;domain);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //结构体成员 c 的地址</span></span>
<span class="line"><span>    printf(&quot;char c:%u\\n&quot;, &amp;(domain.c));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //偏移量</span></span>
<span class="line"><span>    printf(&quot;sub: %d\\n\\n&quot;, (char *) &amp; ((struct fun*)0)-&gt;c);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>jerrysheh@ubuntu:~$ ./fun</span></span>
<span class="line"><span>fun:-1838605600</span></span>
<span class="line"><span>char c:-1838605592</span></span>
<span class="line"><span>sub: 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="链表和指针" tabindex="-1"><a class="header-anchor" href="#链表和指针"><span>链表和指针</span></a></h1><p>定义一个链表</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//定义链表中的节点  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //链表中的数据  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> node </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//指向下一节点的指针  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Node</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺序遍历链表</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TraverseList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pNode </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  pNode p </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NULL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    p </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p_next</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89)]))}const c=i(l,[["render",p],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/i1f5bbc3/","title":"C/C++语言中的指针","lang":"zh-CN","frontmatter":{"title":"C/C++语言中的指针","categories":"C/C++","tags":["C/C++"],"abbrlink":"82d9a37c","createTime":"2018/03/25 18:57:20","permalink":"/article/i1f5bbc3/","description":"这几天在接触一些C语言的项目，发现自己对C语言，包括C++的知识理解不透彻，尤其是指针。导致项目完全看不懂。因此这一篇就来补补C/C++中指针的知识。 参考书籍《C++ Primer》 指针 简单比喻 什么是指针，假如你住5楼503号房间。那么有一张纸条，纸条上写着5楼503。那么，我们就说这张纸条就是指向你房间的一个指针。 定义 指针（Pointer...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/i1f5bbc3/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"C/C++语言中的指针"}],["meta",{"property":"og:description","content":"这几天在接触一些C语言的项目，发现自己对C语言，包括C++的知识理解不透彻，尤其是指针。导致项目完全看不懂。因此这一篇就来补补C/C++中指针的知识。 参考书籍《C++ Primer》 指针 简单比喻 什么是指针，假如你住5楼503号房间。那么有一张纸条，纸条上写着5楼503。那么，我们就说这张纸条就是指向你房间的一个指针。 定义 指针（Pointer..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C/C++语言中的指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简单比喻","slug":"简单比喻","link":"#简单比喻","children":[]},{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"一个简单例子","slug":"一个简单例子","link":"#一个简单例子","children":[]},{"level":2,"title":"空指针","slug":"空指针","link":"#空指针","children":[]},{"level":2,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":2,"title":"void* 指针","slug":"void-指针","link":"#void-指针","children":[]},{"level":2,"title":"指向指针的指针","slug":"指向指针的指针","link":"#指向指针的指针","children":[]},{"level":2,"title":"指向常量的指针","slug":"指向常量的指针","link":"#指向常量的指针","children":[]},{"level":2,"title":"常量指针","slug":"常量指针","link":"#常量指针","children":[]},{"level":2,"title":"常见的定义","slug":"常见的定义","link":"#常见的定义","children":[]},{"level":2,"title":"定义结构体","slug":"定义结构体","link":"#定义结构体","children":[]},{"level":2,"title":"用指针访问结构体成员","slug":"用指针访问结构体成员","link":"#用指针访问结构体成员","children":[]},{"level":2,"title":"结构体偏移量问题","slug":"结构体偏移量问题","link":"#结构体偏移量问题","children":[]}],"readingTime":{"minutes":6.95,"words":2084},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/cpp/C++语言中的指针.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"44914b","sort":10005,"name":"cpp"}]}');export{c as comp,h as data};
