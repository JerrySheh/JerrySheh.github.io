import{_ as a,c as i,f as e,o as n}from"./app-D22ydJtp.js";const t="/images/hadoop/sparksql.jpg",l="/images/hadoop/DataFrame-RDD.jpg",p={};function r(d,s){return n(),i("div",null,s[0]||(s[0]=[e('<h1 id="rdd-和-dataframe-的区别" tabindex="-1"><a class="header-anchor" href="#rdd-和-dataframe-的区别"><span>RDD 和 DataFrame 的区别</span></a></h1><p>RDD 是弹性分布式数据集，其本质是 Dataset。Dataset 可以从 JVM 对象中构建 （例如 rating 对象，即 javabean ），然后通过 map、flatMap、filter 等方法转换来操作。</p><p>为了更好地读写数据以及使用类似SQL语句一样简单地操作，Spark SQL 提供了 DataFrame (其前身是SchemaRDD)。</p><p><img src="'+t+'" alt="sparksql"></p><p>DataFrame 能够让你知道数据集中的每一行和列。这个概念跟关系型数据库中的表（table）类似，但是比表更强大。如下图：</p><p><img src="'+l+`" alt="dataframes"></p><p>DataFrame 可以从结构化的数据文件（structured data files）、Hive中的表、外部数据库或者<strong>已存在的RDD</strong>中构建。</p><p>在 Java 中，使用 <code>Dataset&lt;Row&gt;</code> 来表示 DataFrame。</p><hr><h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h1><h2 id="初始化-spark" tabindex="-1"><a class="header-anchor" href="#初始化-spark"><span>初始化 Spark</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SparkSession</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> spark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SparkSession</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">builder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Java Spark SQL basic example</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">config</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">spark.some.config.option</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">some-value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getOrCreate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-dataframes" tabindex="-1"><a class="header-anchor" href="#创建-dataframes"><span>创建 DataFrames</span></a></h2><p>通过 SparkSession，可以从已存在的RDD、Hive表、或者<a href="https://spark.apache.org/docs/latest/sql-programming-guide.html#data-sources" target="_blank" rel="noopener noreferrer">其他数据源</a> 来创建DataFrames</p><p>例如，从一个 json 文件创建 DataFrames：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Dataset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> df</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> spark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">examples/src/main/resources/people.json</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Displays the content of the DataFrame to stdout</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">df</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// +----+-------+</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// | age|   name|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// +----+-------+</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// |null|Michael|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// |  30|   Andy|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// |  19| Justin|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// +----+-------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作-dataframe" tabindex="-1"><a class="header-anchor" href="#操作-dataframe"><span>操作 DataFrame</span></a></h2><p><code>df</code>可以像数据库表一样进行操作：</p><ul><li><code>df.printSchema()</code>：打印DataFrames结构</li><li><code>df.select(&quot;name&quot;).show()</code>: 选择 name 列打印</li><li><code>df.filter(col(&quot;age&quot;).gt(21)).show()</code>：筛选出年龄列大于21的</li><li><code>df.groupBy(&quot;age&quot;).count().show()</code>：统计各年龄人数</li></ul><p>或者，把它变成一张临时的表</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Register the DataFrame as a SQL temporary view</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">df</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createOrReplaceTempView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">people</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们的内存里就存在一张临时 people 表了。然后通过 Spark SQL 来操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Dataset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sqlDF</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> spark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sql</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">SELECT * FROM people</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    sqlDF</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // +----+-------+</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // | age|   name|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // +----+-------+</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // |null|Michael|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // |  30|   Andy|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // |  19| Justin|</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // +----+-------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>df.createOrReplaceTempView(&quot;people&quot;)</code>的生命周期在 Spark Session，Session一关闭临时表就不存在了。如果要用应用程序级别的全局临时表，使用<code>df.createGlobalTempView(&quot;people&quot;)</code>，使用全局表需要在SQL语句添加 <code>.global_temp</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">df</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createGlobalTempView</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">people</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Global temporary view is tied to a system preserved database \`global_temp\`</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">spark</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sql</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">SELECT * FROM global_temp.people</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">show</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="一个agg的例子" tabindex="-1"><a class="header-anchor" href="#一个agg的例子"><span>一个agg的例子</span></a></h1><p>从数据库读一张表，然后根据相同的 userId，将 productId 聚合为 List</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>// 转换前</span></span>
<span class="line"><span>+------+---------+</span></span>
<span class="line"><span>|userId|productId|</span></span>
<span class="line"><span>+------+---------+</span></span>
<span class="line"><span>|     3|  1786670|</span></span>
<span class="line"><span>|     3|  2679073|</span></span>
<span class="line"><span>|     3|  1082387|</span></span>
<span class="line"><span>|     8|  1082734|</span></span>
<span class="line"><span>|     9|  4039416|</span></span>
<span class="line"><span>|     9|  1734231|</span></span>
<span class="line"><span>|     1|  5252677|</span></span>
<span class="line"><span>|    10|  1141406|</span></span>
<span class="line"><span>|    10|  1026425|</span></span>
<span class="line"><span>|    10|  3426048|</span></span>
<span class="line"><span>|     1|  1193101|</span></span>
<span class="line"><span>|     1|  1051440|</span></span>
<span class="line"><span>+------+---------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//转换后</span></span>
<span class="line"><span>+------+--------------------+</span></span>
<span class="line"><span>|userId|          productIds|</span></span>
<span class="line"><span>+------+--------------------+</span></span>
<span class="line"><span>|     1|[5252677, 1193101...|</span></span>
<span class="line"><span>|     3|[1056461, 1786670...|</span></span>
<span class="line"><span>|     9|[1734231, 4039416]  |</span></span>
<span class="line"><span>|     8|[1082734]           |</span></span>
<span class="line"><span>|    10|[1141406, 3426048...|</span></span>
<span class="line"><span>+------+--------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法：</p><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dataset</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MySQLUtils</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                .readFromMySQL(spark, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">likes</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                .select(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">userId</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">productId</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dataset.show()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">val</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dataFormat</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dataset</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                .groupBy(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">userId</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                .agg(collect_set(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">productId</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) as </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">productIds</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dataFormat.show()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>groupBy 以 userId， 将一个 dataframe 分成多个， 然后 agg 将多个 DataFrame 聚合， 聚合的参数是 collect_set(&quot;productId&quot;) 。</li></ul><hr><p>更多操作见：</p><ul><li><a href="https://spark.apache.org/docs/latest/sql-programming-guide.html#datasets-and-dataframes" target="_blank" rel="noopener noreferrer">官方文档</a></li><li><a href="https://github.com/apache/spark/blob/master/examples/src/main/java/org/apache/spark/examples/sql/JavaSparkSQLExample.java" target="_blank" rel="noopener noreferrer">官方示例</a></li></ul><hr><h1 id="dataframe-的函数" tabindex="-1"><a class="header-anchor" href="#dataframe-的函数"><span>DataFrame 的函数</span></a></h1><h2 id="action-操作" tabindex="-1"><a class="header-anchor" href="#action-操作"><span>Action 操作</span></a></h2><p>1、 collect() ,返回值是一个数组，返回dataframe集合所有的行 2、 collectAsList() 返回值是一个Java类型的数组，返回dataframe集合所有的行 3、 count() 返回一个number类型的，返回dataframe集合的行数 4、 describe(cols: String*) 返回一个通过数学计算的类表值(count, mean, stddev, min, and max)，这个可以传多个参数，中间用逗号分隔，如果有字段为空，那么不参与运算，只这对数值类型的字段。例如df.describe(&quot;age&quot;, &quot;height&quot;).show() 5、 first() 返回第一行 ，类型是row类型 6、 head() 返回第一行 ，类型是row类型 7、 head(n:Int)返回n行 ，类型是row 类型 8、 show()返回dataframe集合的值 默认是20行，返回类型是unit 9、 show(n:Int)返回n行，，返回值类型是unit 10、 table(n:Int) 返回n行 ，类型是row 类型</p><h2 id="dataframe的基本操作" tabindex="-1"><a class="header-anchor" href="#dataframe的基本操作"><span>dataframe的基本操作</span></a></h2><p>1、 cache()同步数据的内存 2、 columns 返回一个string类型的数组，返回值是所有列的名字 3、 dtypes返回一个string类型的二维数组，返回值是所有列的名字以及类型 4、 explan()打印执行计划 物理的 5、 explain(n:Boolean) 输入值为 false 或者true ，返回值是unit 默认是false ，如果输入true 将会打印 逻辑的和物理的 6、 isLocal 返回值是Boolean类型，如果允许模式是local返回true 否则返回false 7、 persist(newlevel:StorageLevel) 返回一个dataframe.this.type 输入存储模型类型 8、 printSchema() 打印出字段名称和类型 按照树状结构来打印 9、 registerTempTable(tablename:String) 返回Unit ，将df的对象只放在一张表里面，这个表随着对象的删除而删除了 10、 schema 返回structType 类型，将字段名称和类型按照结构体类型返回 11、 toDF()返回一个新的dataframe类型的 12、 toDF(colnames：String*)将参数中的几个字段返回一个新的dataframe类型的， 13、 unpersist() 返回dataframe.this.type 类型，去除模式中的数据 14、 unpersist(blocking:Boolean)返回dataframe.this.type类型 true 和unpersist是一样的作用false 是去除RDD</p><h2 id="集成查询" tabindex="-1"><a class="header-anchor" href="#集成查询"><span>集成查询</span></a></h2><p>1、 agg(expers:column*) 返回dataframe类型 ，同数学计算求值 df.agg(max(&quot;age&quot;), avg(&quot;salary&quot;)) df.groupBy().agg(max(&quot;age&quot;), avg(&quot;salary&quot;)) 2、 agg(exprs: Map[String, String]) 返回dataframe类型 ，同数学计算求值 map类型的 df.agg(Map(&quot;age&quot; -&gt; &quot;max&quot;, &quot;salary&quot; -&gt; &quot;avg&quot;)) df.groupBy().agg(Map(&quot;age&quot; -&gt; &quot;max&quot;, &quot;salary&quot; -&gt; &quot;avg&quot;)) 3、 agg(aggExpr: (String, String), aggExprs: (String, String)*) 返回dataframe类型 ，同数学计算求值 df.agg(Map(&quot;age&quot; -&gt; &quot;max&quot;, &quot;salary&quot; -&gt; &quot;avg&quot;)) df.groupBy().agg(Map(&quot;age&quot; -&gt; &quot;max&quot;, &quot;salary&quot; -&gt; &quot;avg&quot;)) 4、 apply(colName: String) 返回column类型，捕获输入进去列的对象 5、 as(alias: String) 返回一个新的dataframe类型，就是原来的一个别名 6、 col(colName: String) 返回column类型，捕获输入进去列的对象 7、 cube(col1: String, cols: String*) 返回一个GroupedData类型，根据某些字段来汇总 8、 distinct 去重 返回一个dataframe类型 9、 drop(col: Column) 删除某列 返回dataframe类型 10、 dropDuplicates(colNames: Array[String]) 删除相同的列 返回一个dataframe 11、 except(other: DataFrame) 返回一个dataframe，返回在当前集合存在的在其他集合不存在的 12、 explode[A, B](inputColumn: String, outputColumn: String)(f: (A) ⇒ TraversableOnce[B])(implicit arg0: scala.reflect.api.JavaUniverse.TypeTag[B]) 返回值是dataframe类型，这个 将一个字段进行更多行的拆分 df.explode(&quot;name&quot;,&quot;names&quot;) {name :String=&gt; name.split(&quot; &quot;)}.show(); 将name字段根据空格来拆分，拆分的字段放在names里面 13、 filter(conditionExpr: String): 刷选部分数据，返回dataframe类型 df.filter(&quot;age&gt;10&quot;).show(); df.filter(df(&quot;age&quot;)&gt;10).show(); df.where(df(&quot;age&quot;)&gt;10).show(); 都可以 14、 groupBy(col1: String, cols: String*) 根据某写字段来汇总返回groupedate类型 df.groupBy(&quot;age&quot;).agg(Map(&quot;age&quot; -&gt;&quot;count&quot;)).show();df.groupBy(&quot;age&quot;).avg().show();都可以 15、 intersect(other: DataFrame) 返回一个dataframe，在2个dataframe都存在的元素 16、 join(right: DataFrame, joinExprs: Column, joinType: String) 一个是关联的dataframe，第二个关联的条件，第三个关联的类型：inner, outer, left_outer, right_outer, leftsemi df.join(ds,df(&quot;name&quot;)===ds(&quot;name&quot;) and df(&quot;age&quot;)===ds(&quot;age&quot;),&quot;outer&quot;).show(); 17、 limit(n: Int) 返回dataframe类型 去n 条数据出来 18、 na: DataFrameNaFunctions ，可以调用dataframenafunctions的功能区做过滤 df.na.drop().show(); 删除为空的行 19、 orderBy(sortExprs: Column*) 做alise排序 20、 select(cols:string*) dataframe 做字段的刷选 df.select($&quot;colA&quot;, $&quot;colB&quot; + 1) 21、 selectExpr(exprs: String*) 做字段的刷选 df.selectExpr(&quot;name&quot;,&quot;name as names&quot;,&quot;upper(name)&quot;,&quot;age+1&quot;).show(); 22、 sort(sortExprs: Column*) 排序 df.sort(df(&quot;age&quot;).desc).show(); 默认是asc 23、 unionAll(other:Dataframe) 合并 df.unionAll(ds).show(); 24、 withColumnRenamed(existingName: String, newName: String) 修改列表 df.withColumnRenamed(&quot;name&quot;,&quot;names&quot;).show(); 25、 withColumn(colName: String, col: Column) 增加一列 df.withColumn(&quot;aa&quot;,df(&quot;name&quot;)).show();</p>`,43)]))}const k=a(p,[["render",r],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/article/zk7w6axk/","title":"Spark SQL 和 DataFrame","lang":"zh-CN","frontmatter":{"title":"Spark SQL 和 DataFrame","comments":true,"categories":["大数据","Spark"],"tags":["大数据"],"abbrlink":"21c6c0f6","createTime":"2018/06/04 00:00:00","permalink":"/article/zk7w6axk/","description":"RDD 和 DataFrame 的区别 RDD 是弹性分布式数据集，其本质是 Dataset。Dataset 可以从 JVM 对象中构建 （例如 rating 对象，即 javabean ），然后通过 map、flatMap、filter 等方法转换来操作。 为了更好地读写数据以及使用类似SQL语句一样简单地操作，Spark SQL 提供了 DataF...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/zk7w6axk/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"Spark SQL 和 DataFrame"}],["meta",{"property":"og:description","content":"RDD 和 DataFrame 的区别 RDD 是弹性分布式数据集，其本质是 Dataset。Dataset 可以从 JVM 对象中构建 （例如 rating 对象，即 javabean ），然后通过 map、flatMap、filter 等方法转换来操作。 为了更好地读写数据以及使用类似SQL语句一样简单地操作，Spark SQL 提供了 DataF..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/hadoop/sparksql.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"大数据"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spark SQL 和 DataFrame\\",\\"image\\":[\\"https://jerrysheh.com/images/hadoop/sparksql.jpg\\",\\"https://jerrysheh.com/images/hadoop/DataFrame-RDD.jpg\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"初始化 Spark","slug":"初始化-spark","link":"#初始化-spark","children":[]},{"level":2,"title":"创建 DataFrames","slug":"创建-dataframes","link":"#创建-dataframes","children":[]},{"level":2,"title":"操作 DataFrame","slug":"操作-dataframe","link":"#操作-dataframe","children":[]},{"level":2,"title":"Action 操作","slug":"action-操作","link":"#action-操作","children":[]},{"level":2,"title":"dataframe的基本操作","slug":"dataframe的基本操作","link":"#dataframe的基本操作","children":[]},{"level":2,"title":"集成查询","slug":"集成查询","link":"#集成查询","children":[]}],"readingTime":{"minutes":5.95,"words":1786},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/bigdata/spark/Spark SQL 和 DataFrame.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"e8c0d3","sort":10001,"name":"bigdata"},{"id":"5133c6","sort":10019,"name":"spark"}]}');export{k as comp,o as data};
