import{_ as s,c as a,f as i,o as t}from"./app-D22ydJtp.js";const n={};function l(c,e){return t(),a("div",null,e[0]||(e[0]=[i(`<p>假设我现在有3个文件，分别是：</p><ul><li><code>mystrlen.c</code>: 是我自己实现的一个计算字符串长度的算法函数。</li><li><code>mystrlen.h</code>: 该算法的头文件。</li><li><code>test.c</code>: main函数，里面有一些字符串需要调用上面的算法来计算长度</li></ul><p>那么在 Linux 下，如何用 gcc 把 mystrlen.c 编译成动态链接库，方便 test.c 去使用呢 ？</p><hr><h1 id="一、gcc各参数的用途" tabindex="-1"><a class="header-anchor" href="#一、gcc各参数的用途"><span>一、gcc各参数的用途</span></a></h1><ul><li><p>-shared ：指定生成动态链接库。</p></li><li><p>-static ：指定生成静态链接库。</p></li><li><p>-fPIC ：表示编译为位置独立的代码，用于编译共享库。目标文件需要创建成位置无关码，就是在可执行程序装载它们的时候，它们可以放在可执行程序的内存里的任何地方。</p></li><li><p>-L. ：表示要连接的库所在的目录。</p></li><li><p>-l：指定链接时需要的动态库。编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.a/.so来确定库的名称。</p></li><li><p>-g ：编译器在编译的时候产生调试信息。</p></li><li><p>-c ：只激活预处理、编译和汇编,也就是把程序做成目标文件(.o文件)。</p></li><li><p>-o ：指定生成的文件名，如果不指定，默认为 a.out</p></li><li><p>-ggdb ：此选项将尽可能的生成gdb的可以使用的调试信息。</p></li><li><p>-Wl,options ：把参数(options)传递给链接器ld。如果options中间有逗号,就将options分成多个选项，然后传递给链接程序。</p></li><li><p>-Wall ：生成所有警告信息。</p></li></ul><hr><h1 id="二、使用gcc把-mystrlen-编译成动态库-libmystrlen-so" tabindex="-1"><a class="header-anchor" href="#二、使用gcc把-mystrlen-编译成动态库-libmystrlen-so"><span>二、使用gcc把 mystrlen 编译成动态库 libmystrlen.so</span></a></h1><h2 id="_1-把-mystrlen-c-编译成目标文件" tabindex="-1"><a class="header-anchor" href="#_1-把-mystrlen-c-编译成目标文件"><span>1. 把 mystrlen.c 编译成目标文件</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>gcc -c mystrlen.c -o mystrlen.o</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在当前目录会生成 <code>mystrlen.o</code>文件</p><h2 id="_2-把目标文件编译成动态链接库" tabindex="-1"><a class="header-anchor" href="#_2-把目标文件编译成动态链接库"><span>2. 把目标文件编译成动态链接库</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>gcc -shared -fPIC mystrlen.o -o libmystrlen.so</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在当前目录会生成 <code>libmystrlen.so</code>文件</p><hr><h1 id="三、使用gcc把-test-c-编译成可执行文件" tabindex="-1"><a class="header-anchor" href="#三、使用gcc把-test-c-编译成可执行文件"><span>三、使用gcc把 test.c 编译成可执行文件</span></a></h1><h2 id="_1-编译" tabindex="-1"><a class="header-anchor" href="#_1-编译"><span>1.编译</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>gcc -L ./ test.c -lmystrlen -o test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在当前目录会生成 <code>test</code>可执行文件</p><h2 id="_2-运行" tabindex="-1"><a class="header-anchor" href="#_2-运行"><span>2.运行</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>./test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>程序里放了4个测试字符串，长度分别为0 3 10 26，如果匹配，则输出 pass</p><p>输出结果：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>data_0 pass [0]</span></span>
<span class="line"><span>data_1 pass [3]</span></span>
<span class="line"><span>data_2 pass [10]</span></span>
<span class="line"><span>data_3 pass [26]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的地方</p><ol><li>我们的动态链接库文件名是<code>libmystrlen.so</code>，但在<code>-l</code>参数中，去掉lib和.so，只需要<code>mystrlen</code>就可以。 -l后面可以不用空格。</li><li>在gcc编译的时候，如果文件a依赖于文件b，那么编译的时候必须把a放前面，b放后面。 所以， 命令中<code>test.c</code>一定要放在<code>-lmystrlen</code>前面。</li></ol><hr><h1 id="三、可能出现的报错" tabindex="-1"><a class="header-anchor" href="#三、可能出现的报错"><span>三、可能出现的报错</span></a></h1><h2 id="error-while-loading-shared-libraries" tabindex="-1"><a class="header-anchor" href="#error-while-loading-shared-libraries"><span>error while loading shared libraries</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>jerrysheh@ubuntu:~/shiyan9$ ./test</span></span>
<span class="line"><span>./test: error while loading shared libraries: libmystrlen.so: cannot open shared object file: No such file or directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为程序运行时找不到我们自己的动态链接库文件，解决办法很简单：</p><h3 id="_1-打开配置文件-etc-ld-so-conf" tabindex="-1"><a class="header-anchor" href="#_1-打开配置文件-etc-ld-so-conf"><span>1. 打开配置文件 /etc/ld.so.conf</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sudo vim /etc/ld.so.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-在配置文件的最后追加一行你的库文件所在的路径即可" tabindex="-1"><a class="header-anchor" href="#_2-在配置文件的最后追加一行你的库文件所在的路径即可"><span>2. 在配置文件的最后追加一行你的库文件所在的路径即可</span></a></h3><p>编辑完后类似这样：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>include /etc/ld.so.conf.d/*.conf</span></span>
<span class="line"><span>/home/jerrysheh/shiyan9/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-刷新配置文件" tabindex="-1"><a class="header-anchor" href="#_3-刷新配置文件"><span>3. 刷新配置文件</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sudo ldconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-重新运行-test-程序" tabindex="-1"><a class="header-anchor" href="#_4-重新运行-test-程序"><span>4. 重新运行 test 程序</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>./test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="找不到头文件" tabindex="-1"><a class="header-anchor" href="#找不到头文件"><span>找不到头文件</span></a></h2><p>如果头文件跟 .c 文件不在同一目录，使用 <code>-I</code> 参数，指定头文件的路径即可</p><p>如头文件在 <code>/home/jerrysheh/shiyan9/include</code> 里面，只需要</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>gcc -I /home/jerrysheh/shiyan9/include -L ./ test.c -lmystrlen -o test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,44)]))}const r=s(n,[["render",l],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/article/q5gxq2x5/","title":"gcc编译基本操作","lang":"zh-CN","frontmatter":{"title":"gcc编译基本操作","categories":"Linux","tags":["C/C++","Linux"],"abbrlink":"bbe22ae6","createTime":"2017/11/21 08:10:47","permalink":"/article/q5gxq2x5/","description":"假设我现在有3个文件，分别是： mystrlen.c: 是我自己实现的一个计算字符串长度的算法函数。 mystrlen.h: 该算法的头文件。 test.c: main函数，里面有一些字符串需要调用上面的算法来计算长度 那么在 Linux 下，如何用 gcc 把 mystrlen.c 编译成动态链接库，方便 test.c 去使用呢 ？ 一、gcc各参数...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/q5gxq2x5/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"gcc编译基本操作"}],["meta",{"property":"og:description","content":"假设我现在有3个文件，分别是： mystrlen.c: 是我自己实现的一个计算字符串长度的算法函数。 mystrlen.h: 该算法的头文件。 test.c: main函数，里面有一些字符串需要调用上面的算法来计算长度 那么在 Linux 下，如何用 gcc 把 mystrlen.c 编译成动态链接库，方便 test.c 去使用呢 ？ 一、gcc各参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gcc编译基本操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 把 mystrlen.c 编译成目标文件","slug":"_1-把-mystrlen-c-编译成目标文件","link":"#_1-把-mystrlen-c-编译成目标文件","children":[]},{"level":2,"title":"2. 把目标文件编译成动态链接库","slug":"_2-把目标文件编译成动态链接库","link":"#_2-把目标文件编译成动态链接库","children":[]},{"level":2,"title":"1.编译","slug":"_1-编译","link":"#_1-编译","children":[]},{"level":2,"title":"2.运行","slug":"_2-运行","link":"#_2-运行","children":[]},{"level":2,"title":"error while loading shared libraries","slug":"error-while-loading-shared-libraries","link":"#error-while-loading-shared-libraries","children":[{"level":3,"title":"1. 打开配置文件 /etc/ld.so.conf","slug":"_1-打开配置文件-etc-ld-so-conf","link":"#_1-打开配置文件-etc-ld-so-conf","children":[]},{"level":3,"title":"2. 在配置文件的最后追加一行你的库文件所在的路径即可","slug":"_2-在配置文件的最后追加一行你的库文件所在的路径即可","link":"#_2-在配置文件的最后追加一行你的库文件所在的路径即可","children":[]},{"level":3,"title":"3. 刷新配置文件","slug":"_3-刷新配置文件","link":"#_3-刷新配置文件","children":[]},{"level":3,"title":"4. 重新运行 test 程序","slug":"_4-重新运行-test-程序","link":"#_4-重新运行-test-程序","children":[]}]},{"level":2,"title":"找不到头文件","slug":"找不到头文件","link":"#找不到头文件","children":[]}],"readingTime":{"minutes":2.85,"words":856},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/linux/gcc编译基本操作.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"decce4","sort":10015,"name":"linux"}]}');export{r as comp,o as data};
