import{_ as t,c as d,f as o,o as c}from"./app-D22ydJtp.js";const a="/images/csapp/hex.png",p="/images/csapp/big_little-endian.png",i={};function r(n,e){return c(),d("div",null,e[0]||(e[0]=[o('<p>在计算机中，信息都是二进制。这一节会尝试解答以下几个问题：</p><ol><li>信息在计算机中是如何表示的？</li><li>计算机又是如何找到和存储这些信息的？</li><li>计算机对数据有哪些运算规则？</li><li>整数和浮点数在计算机中如何表示和运算？</li></ol><hr><h1 id="信息的表示" tabindex="-1"><a class="header-anchor" href="#信息的表示"><span>信息的表示</span></a></h1><p>计算机用二进制存储信息，为了兼顾人类能看懂，又方便表示，一般我们用十六进制来表达计算机中的数字。C语言用 <code>0x</code> 开头表示十六进制数字，如 <code>0x8A</code> 表示 <code>10001010</code>，即 <code>138</code> 。</p><p><img src="'+a+'" alt="hex"></p><p>当一个数字 x 是 2 的非负整数 n 次幂时，即 <code>x = 2^n</code>，我们可以很快算出这个数的十六进制。</p><p>观察下面的进制转换：</p><ul><li><code>2^3</code> 二进制为 <code>1000</code></li><li><code>2^4</code> 二进制为 <code>1 0000</code></li><li><code>2^8</code> 二进制为 <code>1 0000 0000</code></li></ul><p>不难发现， <strong>2的几次方转化成二进制就是1后面有多少个0</strong> 。</p><p>所以我们很快能得出 <code>2^11</code> 为 <code>1000 0000 0000</code>， 改写成十六进制就是 <code>0x800</code>。</p><hr><h1 id="字长" tabindex="-1"><a class="header-anchor" href="#字长"><span>字长</span></a></h1><p>我们通常说的32位机器和64位机器，一般都是指他们的字长（word size），字长通俗地说就是一个字的长度。32位机器的字长为4个字节，64位机器则为8个字节。</p><p>字长决定虚拟地址的大小，32位字长的机器虚拟地址空间最大为 4GB ，而64位机器的则为 16EB。</p><p>当我们说32位程序还是64位程序时，说的是他们的编译方式，而不是运行的机器类型。64位的机器可以兼容32位程序。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>linux&gt; gcc -m32 hello.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h1 id="内存地址和顺序" tabindex="-1"><a class="header-anchor" href="#内存地址和顺序"><span>内存地址和顺序</span></a></h1><h2 id="内存地址" tabindex="-1"><a class="header-anchor" href="#内存地址"><span>内存地址</span></a></h2><p>程序将内存视为一个非常大的字节数组，这个数组称为<code>虚拟内存（virtual memory）</code>，虚拟内存中的每个字节，都可以由唯一的数字（数组下标）来标识，称为<code>内存地址</code>。所有可能地址的集合，就称为<code>虚拟地址空间</code>。</p><h2 id="寻址" tabindex="-1"><a class="header-anchor" href="#寻址"><span>寻址</span></a></h2><p>当我们在程序中声明一个变量（对象）时，我们会好奇这个变量在内存中的位置（即地址），如果这个变量占用多个字节，它在内存中的排列顺序又是怎么样的？<strong>在内存中寻找某个“程序对象”的地址的过程，称为寻址</strong>。</p><h2 id="大端法和小端法" tabindex="-1"><a class="header-anchor" href="#大端法和小端法"><span>大端法和小端法</span></a></h2><p>几乎所有的机器，都会把多字节对象存储在连续的地址中，例如一个4字节的int变量，地址为 <code>0x100</code>，那么它四个字节分别被存储在 <code>0x100</code>、<code>0x101</code>、<code>0x102</code>、<code>0x103</code> 位置。</p><p>但是有一些机器，从最高有效字节到最低有效字节的顺序排列，称为<code>大端法（big endian）</code>，另一些机器又是从最低到最高，称为<code>小端法(little endian)</code>。例如，一个 int 变量 <code>0x01234567</code>， 用大端法表示是 <code>01 23 45 67</code>， 而用小端法表示却是 <code>67 45 23 01</code>。</p><p><img src="'+p+'" alt="big_little-endian"></p><p>我们常用的 x86 机器（Intel兼容机），包括 Windows、Linux 和 Mac 操作系统，都是采用了小端法。而有一些 IBM 和 Oracle 机器采用了大端法。用于智能手机的ARM芯片，本身硬件支持大端或小端，但有趣的是，搭载了 Android 或 iOS 操作系统的这些智能手机，只能运行小端模式。</p><p>大端和小端并没有谁对谁错，谁好谁坏之分，甚至对于我们开发人员来说，字节顺序对我们是隐藏的。但是了解这些知识，可以避免我们在某些时候出错，例如通过网络发送二进制数据时，大端法的机器传送到小端法的机器，如果没有特殊处理，就会导致接收到的字节顺序反了。</p><h2 id="字符串表示" tabindex="-1"><a class="header-anchor" href="#字符串表示"><span>字符串表示</span></a></h2><p>C语言中，字符串的本质是字节数组，且以null（ASCII码为<code>00</code>）结尾。字符串 <code>12345</code> 的字节数组为 <code>31 32 33 34 35 00</code>（<code>1</code>的ASCII码是<code>49</code>，十六进制<code>0x31</code>）。</p><p>字符串的表示跟字节顺序和字大小规则无关。</p><hr><h1 id="运算" tabindex="-1"><a class="header-anchor" href="#运算"><span>运算</span></a></h1><p>在C语言中，支持位运算、逻辑运算和移位运算。</p><p>布尔代数即数学中与、或、非、异或的概念。如下表：</p><table><thead><tr><th>符号</th><th>英文简写</th><th>中文含义</th></tr></thead><tbody><tr><td>&amp;</td><td>AND</td><td>与</td></tr><tr><td>|</td><td>OR</td><td>或</td></tr><tr><td>~</td><td>NOT</td><td>非</td></tr><tr><td>^</td><td>XOR</td><td>异或</td></tr></tbody></table><p>C语言可以直接用这些符号进行位运算。例如： <code>~0x41</code>（<code>~0100 0001</code>） 的结果是 <code>0xBE</code>（<code>1011 1110</code>）</p><p>有时候我们会希望进行逻辑上的运算，比如某两个条件都成立时，或某两个条件之一成立时，这种场景则需要用逻辑运算。</p><table><thead><tr><th>符号</th><th>英文简写</th><th>中文含义</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>AND</td><td>逻辑与</td></tr><tr><td>||</td><td>OR</td><td>逻辑或</td></tr><tr><td>!</td><td>NOT</td><td>非</td></tr></tbody></table><p>逻辑运算只有两种结果， <code>TRUE</code> 和 <code>FALSE</code>， 用 1 和 0 来表示。</p><p>例如，<code>!0x41</code> 的结果为 <code>0x00</code>，即 <code>FALSE</code>。</p><p>移位运算，即把二进制数整体往左或往右移动。用 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 符号来表示。需要注意的是，右移分为逻辑右移和算术右移，逻辑右移无脑填充0，算术右移会根据最高位符号位，来决定是填充0还是填充1。</p><hr><h1 id="整数" tabindex="-1"><a class="header-anchor" href="#整数"><span>整数</span></a></h1><p>在C语言中，有无符号数和有符号数之分。无符号数只能表示非负数，用关键字 <code>unsigned</code> 声明。其内部是用无符号编码的，8位的数字取值范围为 <code>0000 0000</code> ~ <code>1111 1111</code>。</p><p>但默认情况下，C语言的数字可以表示负数，这种称为有符号数。其内部用补码编码。二进制的第一位作为符号位，为0时表示非负数，为1时表示负数。</p><p>两个正数相加可能会得到一个负数，这是因为计算机的字长是有限的，当相加后的值超出所能表达的最大值，会出现溢出。</p><hr><h1 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数"><span>浮点数</span></a></h1><p>在我们熟悉的十进制中，我们知道，一个数字乘以10，小数点就向右移动一位，除以10，小数点就向左移动一位。 例如 <code>123.456</code>，乘10为 <code>1234.56</code>，除以10为 <code>12.3456</code>。</p><p>在二进制中也是类似，乘以2，向右移动一位，除以2，向左移动一位。例如 <code>1101.1010</code>，乘2为 <code>11011.010</code>，除以2为 <code>110.11010</code>。反过来说，移多少位，就是2的多少次方。</p><p>在计算机中，处理小数有两种表示方法 —— <strong>定点</strong> 和 <strong>浮点</strong>，定点就是小数点永远在固定的位置上，提前对齐。优点是简单，缺点是表示范围小，不能充分运用二进制的存储单元。而浮点相当于一个定点数加上一个阶码，阶码表示将这个定点数的小数点移动若干位，由于可以用阶码移动小数点，因此称为浮点数。</p><p>计算机中用三个部分组合的二进制位来表示浮点数。分别为：</p><ol><li>数符：正数为0，负数为1</li><li>阶码：阶码的计算公式：阶数（左移多少位） + 偏移量</li><li>尾数：小数点后面的数</li></ol><p>例如一个数字 <code>178.125</code>，换成二进制是 <code>10110010.001</code>，这个二进制数用浮点数怎么表示呢？</p><ol><li>首先这个数字是正数，数符肯定为0</li><li>之后把小数点移动到整数位只有1（<code>1.0110010001</code>），发现需要左移7位，得到阶数为 <code>111</code>（3位的二进制数）， 偏移量2^(e-1)-1 = 127（e是阶数的位数），即 <code>01111111</code>，计算阶码为<code>111 + 01111111 = 10000110</code></li><li>尾数就是 <code>1.0110010001</code> 小数点后面的数 <code>0110010001</code></li></ol><p>最终得到 <code>0 10000110 0110010001 0000000000000</code> (32位，后面补0)</p>',58)]))}const l=t(i,[["render",r],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/computer-system/9fs0demg/","title":"程序的结构和执行","lang":"zh-CN","frontmatter":{"title":"程序的结构和执行","categories":"计算机系统结构","tags":["计算机系统结构"],"abbrlink":"ca36e17e","createTime":"2021/08/02 22:01:01","permalink":"/computer-system/9fs0demg/","description":"在计算机中，信息都是二进制。这一节会尝试解答以下几个问题： 信息在计算机中是如何表示的？ 计算机又是如何找到和存储这些信息的？ 计算机对数据有哪些运算规则？ 整数和浮点数在计算机中如何表示和运算？ 信息的表示 计算机用二进制存储信息，为了兼顾人类能看懂，又方便表示，一般我们用十六进制来表达计算机中的数字。C语言用 0x 开头表示十六进制数字，如 0x8...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/computer-system/9fs0demg/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"程序的结构和执行"}],["meta",{"property":"og:description","content":"在计算机中，信息都是二进制。这一节会尝试解答以下几个问题： 信息在计算机中是如何表示的？ 计算机又是如何找到和存储这些信息的？ 计算机对数据有哪些运算规则？ 整数和浮点数在计算机中如何表示和运算？ 信息的表示 计算机用二进制存储信息，为了兼顾人类能看懂，又方便表示，一般我们用十六进制来表达计算机中的数字。C语言用 0x 开头表示十六进制数字，如 0x8..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/csapp/hex.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"计算机系统结构"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序的结构和执行\\",\\"image\\":[\\"https://jerrysheh.com/images/csapp/hex.png\\",\\"https://jerrysheh.com/images/csapp/big_little-endian.png\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"内存地址","slug":"内存地址","link":"#内存地址","children":[]},{"level":2,"title":"寻址","slug":"寻址","link":"#寻址","children":[]},{"level":2,"title":"大端法和小端法","slug":"大端法和小端法","link":"#大端法和小端法","children":[]},{"level":2,"title":"字符串表示","slug":"字符串表示","link":"#字符串表示","children":[]}],"readingTime":{"minutes":6.56,"words":1968},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/computer-system/2.程序的结构和执行.md"}');export{l as comp,h as data};
