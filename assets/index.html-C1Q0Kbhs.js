import{_ as l,c as a,f as i,o as t}from"./app-D22ydJtp.js";const n={};function r(s,e){return t(),a("div",null,e[0]||(e[0]=[i('<p>五大常用算法：</p><ol><li>分治</li><li>动态规划</li><li>贪心</li><li>回溯</li><li>分支界定</li></ol><hr><h1 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法"><span>分治算法</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>分治，就是“分而治之”，把一个问题分成两个或多个相同或相似的子问题，再把子问题分成更小的子问题……最后子问题可以直接求解，原问题的解即子问题的解的合并。</p><p>分治法常常跟递归一起使用，借助递归，我们可以方便地将问题分解再将结果合并。</p><h2 id="分治法的基本步骤" tabindex="-1"><a class="header-anchor" href="#分治法的基本步骤"><span>分治法的基本步骤</span></a></h2><ol><li><strong>分解</strong>：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</li><li><strong>递归</strong>：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li><li><strong>合并</strong>：将各个子问题的解合并为原问题的解。</li></ol><h2 id="可使用分治法求解的经典问题" tabindex="-1"><a class="header-anchor" href="#可使用分治法求解的经典问题"><span>可使用分治法求解的经典问题</span></a></h2><ol><li>二分搜索</li><li>大整数除法</li><li>Strassen矩阵乘法</li><li>棋盘覆盖</li><li>归并排序</li><li>快速排序</li><li>线性时间选择</li><li>最接近点对问题</li><li>循环赛日程表</li><li>汉诺塔</li></ol><hr><h1 id="动态规划-dynamic-programming" tabindex="-1"><a class="header-anchor" href="#动态规划-dynamic-programming"><span>动态规划（dynamic programming）</span></a></h1><h2 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h2><p>将一个问题分解成若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><h2 id="与分治法的差别" tabindex="-1"><a class="header-anchor" href="#与分治法的差别"><span>与分治法的差别</span></a></h2><p>适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。</p><h2 id="动态规划的特点" tabindex="-1"><a class="header-anchor" href="#动态规划的特点"><span>动态规划的特点</span></a></h2><ol><li>求一个问题的最优解；</li><li>整体问题的最优解依赖于各子问题的最优解；</li><li>大问题分解成若干小问题，这些小问题之间还有互相重叠的更小子问题；</li><li>从上往下分析，从下往上求解</li></ol><p>在应用动态规划的时候，有两个要点：</p><ol><li>我们每一步都可能面临若干个选择，由于我们事先不知道哪个选择是最优解，只好把所有的可能都尝试一遍。</li><li>总是从解决最小问题开始，并把已经解决的子问题的最优解存储下来（通常存储在一维或二维数组），之后把子问题的最优解组合起来逐步解决大的问题</li></ol><h2 id="动态规划的基本步骤" tabindex="-1"><a class="header-anchor" href="#动态规划的基本步骤"><span>动态规划的基本步骤</span></a></h2><p>动态规划过程如下：</p><p>初始状态 → │决策１│ → │决策２│ → ……… → │决策ｎ│ → 结束状态</p><ol><li><strong>划分阶段</strong>：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</li><li><strong>确定状态和状态变量</strong>：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</li><li><strong>确定决策并写出状态转移方程</strong>：根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</li><li><strong>寻找边界条件</strong>：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</li></ol><p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p><ol><li>问题的阶段</li><li>每个阶段的状态</li><li>从前一个阶段转化到后一个阶段之间的递推关系。</li></ol><hr><h1 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</p><p>贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p><h2 id="适用前提" tabindex="-1"><a class="header-anchor" href="#适用前提"><span>适用前提</span></a></h2><p>局部最优策略能导致产生全局最优解。</p><h2 id="贪心算法基本步骤" tabindex="-1"><a class="header-anchor" href="#贪心算法基本步骤"><span>贪心算法基本步骤</span></a></h2><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol><hr><h1 id="回溯法" tabindex="-1"><a class="header-anchor" href="#回溯法"><span>回溯法</span></a></h1><h2 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h2><p>在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p><p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><h2 id="基本思想" tabindex="-1"><a class="header-anchor" href="#基本思想"><span>基本思想</span></a></h2><p>在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。</p><p>若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。</p><p>而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</p><h2 id="回溯基本步骤" tabindex="-1"><a class="header-anchor" href="#回溯基本步骤"><span>回溯基本步骤</span></a></h2><ol><li>针对所给问题，确定问题的解空间:首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解；</li><li>确定结点的扩展搜索规则；</li><li>以 <strong>深度优先</strong> 方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。</li></ol><hr><h1 id="分支限界法" tabindex="-1"><a class="header-anchor" href="#分支限界法"><span>分支限界法</span></a></h1><p>回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。</p><h2 id="分支搜索" tabindex="-1"><a class="header-anchor" href="#分支搜索"><span>分支搜索</span></a></h2><p>所谓“分支”就是采用 <strong>广度优先</strong> 的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索。</p>',52)]))}const o=l(n,[["render",r],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/data-structure/cwniqr77/","title":"漫谈五大常用算法","lang":"zh-CN","frontmatter":{"title":"漫谈五大常用算法","comments":true,"categories":"数据结构和算法","tags":["数据结构和算法"],"abbrlink":"b054556","createTime":"2018/08/12 22:57:44","permalink":"/data-structure/cwniqr77/","description":"五大常用算法： 分治 动态规划 贪心 回溯 分支界定 分治算法 概念 分治，就是“分而治之”，把一个问题分成两个或多个相同或相似的子问题，再把子问题分成更小的子问题……最后子问题可以直接求解，原问题的解即子问题的解的合并。 分治法常常跟递归一起使用，借助递归，我们可以方便地将问题分解再将结果合并。 分治法的基本步骤 分解：将原问题分解为若干个规模较小，...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/data-structure/cwniqr77/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"漫谈五大常用算法"}],["meta",{"property":"og:description","content":"五大常用算法： 分治 动态规划 贪心 回溯 分支界定 分治算法 概念 分治，就是“分而治之”，把一个问题分成两个或多个相同或相似的子问题，再把子问题分成更小的子问题……最后子问题可以直接求解，原问题的解即子问题的解的合并。 分治法常常跟递归一起使用，借助递归，我们可以方便地将问题分解再将结果合并。 分治法的基本步骤 分解：将原问题分解为若干个规模较小，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"数据结构和算法"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"漫谈五大常用算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"分治法的基本步骤","slug":"分治法的基本步骤","link":"#分治法的基本步骤","children":[]},{"level":2,"title":"可使用分治法求解的经典问题","slug":"可使用分治法求解的经典问题","link":"#可使用分治法求解的经典问题","children":[]},{"level":2,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":2,"title":"与分治法的差别","slug":"与分治法的差别","link":"#与分治法的差别","children":[]},{"level":2,"title":"动态规划的特点","slug":"动态规划的特点","link":"#动态规划的特点","children":[]},{"level":2,"title":"动态规划的基本步骤","slug":"动态规划的基本步骤","link":"#动态规划的基本步骤","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"适用前提","slug":"适用前提","link":"#适用前提","children":[]},{"level":2,"title":"贪心算法基本步骤","slug":"贪心算法基本步骤","link":"#贪心算法基本步骤","children":[]},{"level":2,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":2,"title":"基本思想","slug":"基本思想","link":"#基本思想","children":[]},{"level":2,"title":"回溯基本步骤","slug":"回溯基本步骤","link":"#回溯基本步骤","children":[]},{"level":2,"title":"分支搜索","slug":"分支搜索","link":"#分支搜索","children":[]}],"readingTime":{"minutes":6.21,"words":1863},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/data-structure/8.数据结构之漫谈五大常用算法.md"}');export{o as comp,p as data};
