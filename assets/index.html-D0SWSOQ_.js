import{_ as k,c as d,f as n,a,b as i,d as l,e,r as h,o as r}from"./app-D22ydJtp.js";const c={};function g(E,s){const t=h("font"),p=h("RouteLink");return r(),d("div",null,[s[13]||(s[13]=n('<p>这一篇主要从以下几个角度谈谈 MySQL 的优化：</p><ol><li>使用恰当的数据类型</li><li>高效索引</li><li>高效查询</li><li>大表优化（含分库分表）</li><li>执行计划</li><li>碎片清理</li></ol><hr><h1 id="sql执行过程" tabindex="-1"><a class="header-anchor" href="#sql执行过程"><span>SQL执行过程</span></a></h1><p>想要优化，先得了解一条SQL查询语句的执行过程。</p><p>MySQL 大致架构为： 客户端 --&gt; Server层 --&gt; 存储引擎</p><p>客户端发起一次SQL请求，会依次经过以下Server层组件：</p><ol><li><strong>连接器</strong>：连接器负责跟客户端建立连接、获取权限、维持和管理连接</li><li><strong>查询缓存</strong>：之前执行过的语句，会先放在缓存里</li><li><strong>分析器</strong>：词法分析、语法分析</li><li><strong>优化器</strong>：优化语句，决定如何使用索引</li><li><strong>执行器</strong>：判断权限，开始执行语句</li></ol><p>最后到达存储引擎进行数据的存储和提取。</p><p>MySQL是插件式架构，支持InnoDB、MyISAM、Memory等多个存储引擎。</p><hr><h1 id="schema与数据类型优化" tabindex="-1"><a class="header-anchor" href="#schema与数据类型优化"><span>Schema与数据类型优化</span></a></h1><p>基本原则：</p>',13)),a("ul",null,[s[3]||(s[3]=n("<li><strong>更小</strong>：如果只要存0-200，<code>tinyint unsigned</code> 比 <code>int</code> 好</li><li><strong>简单</strong>：用内建类型（<code>date</code>、<code>datetime</code>）表示时间而不是<code>varchar</code></li>",2)),a("li",null,[s[1]||(s[1]=a("strong",null,"避免NULL",-1)),s[2]||(s[2]=i("：有 NULL 的列使得索引、索引统计和值比较更加复杂。虽然调优时把 NULL 改 NOT NULL 性能提升较小，")),l(t,{color:"red"},{default:e(()=>s[0]||(s[0]=[i("但是如果要在列上建索引，就应该避免 NULL")])),_:1})])]),s[14]||(s[14]=n(`<h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><p>整数类型包括 <code>TINYINT</code>（8位）、<code>SMALLINT</code>（16位）、<code>MEDIUINT</code>（24位）、<code>INT</code>（32位）、<code>BIGINT</code>（64位）。无符号数和有符号数使用相同的存储空间，具有相同的性能。整数计算一般用 64位的 BIGINT 整数，但一些聚合函数用 DECIMAL 或 DOUBLE。</p><p>MySQL 可以为整数指定宽度，如 <code>INT(11)</code>，但这不会限制值的合法范围。仅仅是在客户端中显示字符的个数而已。</p><h2 id="实数-小数-类型" tabindex="-1"><a class="header-anchor" href="#实数-小数-类型"><span>实数（小数）类型</span></a></h2><p>实数不仅仅存储小数，也可以用 DECIMAL 存储比 BIGINT 大的整数。DECIMAL 一般用来做精确计算，但是需要的额外空间和计算开销也大。因此，如果不需要精确计算，4字节的FLOAT或8字节的DOUBLE已经足够。</p><p>但是，在《阿里巴巴开发手册》里面，规范小数一律用 DECIMAL ，可以避免潜在问题。</p><blockquote><p>【强制】小数类型为 decimal ，禁止使用 float 和 double 。 说明： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p></blockquote><h2 id="char-和-varchar" tabindex="-1"><a class="header-anchor" href="#char-和-varchar"><span>CHAR 和 VARCHAR</span></a></h2><p>存储引擎存储 CHAR 或 VARCHAR 的方式，在内存和在磁盘中可能不一样。</p><ul><li><strong>CHAR</strong>：定长字符串。会截断末尾的空格。适合存储较短的字符串或所有值长度接近。</li><li><strong>VARCHAR</strong>：可变长字符串。需要用1或2个额外字节记录字符串的长度（列的最大长度超过255字节，用2个额外字节记录长度信息）。VARCHAR虽然节省空间性能较好，但 UPDATE 时由于长度的改变，需要额外的工作。适用场景：字符串的最大长度比平均长度大很多，列很少更新。</li></ul><p>需要注意的是，<code>VARCHAR(5)</code>和<code>VARCHAR(200)</code>存储<code>hello</code>的空间开销是一样的，但是更长的列会消耗更多的内存，所以最好根据需要来分配。</p><p>同理，有 <code>BINARY</code> 和 <code>VARBINARY</code>，存储的是二进制值，二进制的比较比字符比较要快。</p><h2 id="blob-和-text" tabindex="-1"><a class="header-anchor" href="#blob-和-text"><span>BLOB 和 TEXT</span></a></h2><p>BLOB 和 TEXT 都是设计用来存储很大的字符串数据的，但 BLOB 采用二进制存储，TEXT采用字符方式存储。</p><p>跟其他类型不一样的是，当 BLOB 或 TEXT 值太大时，InnoDB会用专门的“外部”存储区来存储。每个值只需要在行内用1-4个字节存储指针，然后指向外部真正存储的区域。</p><ul><li><strong>BLOB</strong>：二进制数据，没有排序规则和字符集</li><li><strong>TEXT</strong>：字符数据，有排序规则和字符集</li></ul><p>MEMORY 存储引擎不支持 BLOB 和 TEXT，如果使用到了，将不得不转换成 MyISAM 磁盘临时表，这将带来很大的开销。MEMORY中最好避免使用 BLOB 和 TEXT。</p><blockquote><p><code>TEXT</code>（2^16）最大存储长度为 65535，如果需要存储更大的文本，使用 <code>MEDIUMTEXT</code>（2^24，约1600万） 或 <code>LONGTEXT</code>（2^32，约42亿）</p></blockquote><h2 id="枚举类代替字符串" tabindex="-1"><a class="header-anchor" href="#枚举类代替字符串"><span>枚举类代替字符串</span></a></h2><p>有时候可以用枚举类代替不重复的字符串。其内部是用整数实际存储的，而不是字符串。因此最好不要往里面插入常量（如&#39;1&#39;,&#39;2&#39;）以避免混乱。但是也有缺点，添加或删除字符串需要用 <code>ALTER TABLE</code>，因此对于一些未来可能会改变的字符串，使用枚举是不明智的。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> enum_test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  e ENUM(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fish</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apple</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dog</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> enum_test(e) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">VALUES</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fish</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dog</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">apple</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="datetime-和-timestamp" tabindex="-1"><a class="header-anchor" href="#datetime-和-timestamp"><span>DATETIME 和 TIMESTAMP</span></a></h2><ul><li><strong>DATETIME</strong>：能保存1001年-9999年，精度为秒。将日期和时间封装到 YYYYMMDDHHMMSS 格式的整数中，与时区无关。使用8个字节的存储空间。</li><li><strong>TIMESTAMP</strong>：能保存1970-2038年，只使用4个字节，存储的是1970年1月1日到现在的秒数，时区相关。</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><ul><li>MySQL 把 bit 当作字符串，而不是数字</li><li>MySQL 内部使用整数存储 ENUM 和 SET 类型，比较时再转换成字符串</li><li>应该用无符号整数（unsigned int）存储IP地址，MySQL提供 <code>INET_ATON()</code>（字符串转整数） 和 <code>INET_NTOA()</code>（整数转字符串） 函数</li></ul><hr><h1 id="mysql-高效索引" tabindex="-1"><a class="header-anchor" href="#mysql-高效索引"><span>MySQL 高效索引</span></a></h1><h2 id="单列索引" tabindex="-1"><a class="header-anchor" href="#单列索引"><span>单列索引</span></a></h2><p>对于独立的列来说，要创建高效索引，必须满足：<strong>索引列不能是表达式的一部分，也不能是函数的参数</strong>。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 使用了表达式，索引失效</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> actor_id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sakila</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">actor</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> actor_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TO_DAYS(CURRENT_DATE) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TO_DAYS(DATE_COL) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应该养成简化 WHERE 条件的习惯，始终将索引列放在比较符号的一侧</strong>。</p><h2 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引"><span>前缀索引</span></a></h2><p>有时候要索引很长的字符列，这会让索引变得很大且慢。一种解决办法是在索引上再建哈希索引。但还可以用 <strong>前缀索引</strong> 来解决。</p>`,33)),a("p",null,[s[5]||(s[5]=i("前缀索引，顾名思义，只索引字符串的前面一部分，例如，对于数据")),s[6]||(s[6]=a("code",null,"University",-1)),s[7]||(s[7]=i("，我们可以建立索引")),s[8]||(s[8]=a("code",null,"Uni",-1)),s[9]||(s[9]=i("。但这样会降低索引的选择性，")),l(t,{color:"red"},{default:e(()=>s[4]||(s[4]=[i("索引选择性是指不重复的索引值 和 表记录数的比值")])),_:1}),s[10]||(s[10]=i("。选择性越高，说明索引越多。唯一索引的选择性是1，因此性能最高。"))]),s[15]||(s[15]=n(`<p><strong>在 MySQL 里面，BLOB、TEXT 和 很长的 VARCHAR 必须使用前缀索引</strong>。</p><p>查看前缀为3的情况</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt, </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">LEFT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(city, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pref</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city_demo</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">GROUP BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pref</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cnt </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DESC</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那索引前缀多长比较合适呢？诀窍是，<strong>前缀应该足够长，使得选择性接近于整个列，但不能太长（以便节约空间）</strong>。</p><p>计算完整列的选择性方法：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DISTINCT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city_demo;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假如计算出来结果是 0.0312，那么选择性接近 0.0312 的前缀就差不多了。</p><p>测试各个前缀的选择性：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DISTINCT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> LEFT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(city, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sel3,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DISTINCT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> LEFT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(city, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sel4,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DISTINCT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> LEFT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(city, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sel5</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city_demo;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们找到一个合适的前缀，比如是5，用下面的方式来创建前缀为5的前缀索引：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city_demo </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ADD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> KEY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (city(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>前缀索引的缺点</strong>是无法使用前缀索引做 GROUP BY 和 ORDER BY 和 覆盖扫描。</p><h2 id="多列索引" tabindex="-1"><a class="header-anchor" href="#多列索引"><span>多列索引</span></a></h2><p>常见多列索引的错误有：为每一列创建独立的索引，或者按照错误的顺序创建索引。那什么是正确的顺序呢？一个经验法则是：<strong>当不需要考虑排序和分组时，将选择性最高的列放在最前面</strong>。</p><p>一个简单的例子</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> payment </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> staff_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> customer_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 584</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建索引时，是应该创建 (staff_id, customer_id) 还是 (customer_id,staff_id) ？这取决于哪一列的选择性更高。但这也不是绝对的，还要考虑 WHERE 子句中的排序、分组、范围条件等其他因素。</p><h2 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h2><p>聚簇的意思是：数据行和相邻的键值紧凑地存储在一起。当表有聚簇索引时，数据行本身存放在索引的叶子页。<strong>InnoDB的实现是，通过主键聚集数据</strong>，被索引的列就是主键列。如果没有主键，InnoDB会选择一个非空索引代替，如果没有这样的索引，就隐式创建一个。</p>`,19)),a("p",null,[s[12]||(s[12]=i("InnoDB 支持聚簇索引，而 MyISAM 不支持，使用了聚簇索引和非聚簇索引的存储方式区别可参考 ")),l(p,{to:"/db/2d9ksj3y/"},{default:e(()=>s[11]||(s[11]=[i("MySQL的存储引擎、事务、锁")])),_:1})]),s[16]||(s[16]=n(`<p>聚簇索引优点：</p><ul><li>把相关数据保存在一起</li><li>数据访问更快</li><li>使用覆盖索引扫描的查询可以直接使用页节点中的主键值</li></ul><p>聚簇索引缺点：</p><ul><li>聚簇索引提高了I/O密集型应用的性能，但如果数据全部在内存中，那就没有优势</li><li>插入速度严重依赖于插入顺序</li><li>更新列代价高</li><li>页分裂问题，占用更多磁盘空间</li><li>全表扫描更慢</li><li>二级索引较大，访问要2次</li></ul><h2 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引"><span>覆盖索引</span></a></h2><p>正如聚簇索引中你看到的，索引本身是可以包含数据本身的，这样我们就不必回表查询，直接在索引拿到数据就行了。想象一下，如果一本书需要知道第 11 章是什么标题，你会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p><p><strong>如果一个索引包含（覆盖）所有需要查询的字段的值，我们就称之为覆盖索引</strong>。覆盖索引也不一定是聚簇索引，在MySQL中，只有 BTree 索引能做覆盖索引。</p><hr><h1 id="mysql-查询优化" tabindex="-1"><a class="header-anchor" href="#mysql-查询优化"><span>MySQL 查询优化</span></a></h1><h2 id="查询慢的原因" tabindex="-1"><a class="header-anchor" href="#查询慢的原因"><span>查询慢的原因</span></a></h2><ol><li><strong>查询了不需要的记录</strong>：一个典型的错误是先 SELECT 查出所有结果集，然后获取前面的 N 行后关闭结果。这样 N 行后面的数据就是不需要的数据，MySQL会把时间浪费在这上面。最好的解决办法是用 limit N，这样MySQL只会去找 N 行而不是所有。</li><li><strong>多表关联时返回全部列</strong>：比如 <code>SELECT * FROM xxx join yyy ON ...</code>，其实可以用 <code>SELECT sakila.actor.* FROM sakila join yyy ON ... </code>，只取关键的列。</li><li><strong>总是取出全部列</strong>：<code>SELECT *</code>的做法在数据库的角度是不考虑周全的，但是有时候从开发的角度看却能简化开发，因为能提高相同代码片段的复用性。</li><li><strong>重复查询相同的数据</strong>：需要多次重复查询的数据，最好第一次查询后缓存起来，可以使用 redis 等。</li></ol><h2 id="重构查询的两种方法" tabindex="-1"><a class="header-anchor" href="#重构查询的两种方法"><span>重构查询的两种方法</span></a></h2><h3 id="_1-切分查询" tabindex="-1"><a class="header-anchor" href="#_1-切分查询"><span>1.切分查询</span></a></h3><p>一次大查询（例如删除旧的数据）可能需要一次锁住很多数据，占满整个事务日志、耗尽系统资源、阻塞很多其他重要的查询。可以把大查询切分成很多个小查询。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 原始 大查询</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DELETE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> messages </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> created </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DATE_SUB(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NOW</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, INTERVEL </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> MONTH</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 切分 小查询</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rows_affected </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">do {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    rows_affected </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> do_query(</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">DELETE FROM messages WHERE created &lt; DATE_SUB(NOW(), INTERVEL 3 LIMIT 10000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    )</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">} </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> rows_affected </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-分解关联查询" tabindex="-1"><a class="header-anchor" href="#_2-分解关联查询"><span>2.分解关联查询</span></a></h3><p>高性能应用都会对关联查询进行分解，先对每一个表进行单表查询，再将结果在应用程序进行关联。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 分解前</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  JOIN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag_post </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> tag_post</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">tag_id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> tag</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  JOIN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> post </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ON</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> tag_post</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">post_id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> post</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> tag</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">tag</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mysql</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">分解后</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mysql</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag_post </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tag_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1234</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> post </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> post</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">123</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">456</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7897</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9090</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化特定类型的查询" tabindex="-1"><a class="header-anchor" href="#优化特定类型的查询"><span>优化特定类型的查询</span></a></h2><h3 id="优化count" tabindex="-1"><a class="header-anchor" href="#优化count"><span>优化COUNT()</span></a></h3><ul><li>如果要统计所有行，用 <code>COUNT(*)</code> 而不是 <code>COUNT(col)</code> 。</li><li><code>COUNT(col)</code>统计的是不为NULL的行</li><li><code>COUNT(distinct col)</code>统计不为NULL且不重复的行</li><li><code>COUNT(distinct col 1, col 2)</code> 如果其中一列全为 NULL ，那么即使另一列有不同的值，也返回为 0</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 统计行数，假如该表有100行，返回100</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">count</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 统计 last_name 这一列不为NULL的数量</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">count</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(last_name);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MyISAM中，不带 WHERE 的 <code>COUNT(*)</code> 速度非常快，因为可以直接利用存储引擎的特征获取这个值。但是带 WHERE 的跟其他存储引擎没区别</li><li>如果某列col不可能为NULL，那 <code>COUNT(col)</code> 将被自动优化成 <code>COUNT(*)</code></li></ul><p>借助 MyISAM <code>COUNT(*)</code> 非常快的特性，我们可以优化如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 原语句，求大于5</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 优化后，总数 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 小于等于5</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> COUNT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化关联查询" tabindex="-1"><a class="header-anchor" href="#优化关联查询"><span>优化关联查询</span></a></h3><ul><li>确保 ON 或 USING 子句的列上有索引。也就是说，表A和表B用列c关联时，如果优化器的关联顺序是B、A，那只需要在 <strong>第二张表</strong>（A表） 的相应列上创建索引。</li><li>确保 GROUP BY 和 ORDER BY 中的表达式 <strong>只涉及到一个表中的列</strong>，这样MySQL才有可能使用索引来优化这个过程。</li></ul><h3 id="优化-group-by" tabindex="-1"><a class="header-anchor" href="#优化-group-by"><span>优化 GROUP BY</span></a></h3><p>MySQL在无法使用索引时，GROUP BY会用临时表或文件排序来做分组。在 GROUP BY 的时候，如果标识列（如用户id）和查找列（如用户名）是对应的，那用标识列做分组，效率会比查找列高，GROUP BY右表标识列比GROUP BY左表标识列高。</p><p>如果不关心结果集的顺序，但GROUP BY默认会按分组的字段排序从而使用了文件排序功能，不需要的时候可以<code>ORDER BY NULL</code>。</p><h3 id="优化-limit-分页-深分页问题" tabindex="-1"><a class="header-anchor" href="#优化-limit-分页-深分页问题"><span>优化 LIMIT 分页（深分页问题）</span></a></h3><p>MySQL limit接收一个或两个参数，如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 取出前18条记录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">limit</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 取出第51</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">53条记录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">limit</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但有两个参数的时候，且第一个参数（偏移量）非常大，如 <code>limit 10000,30</code>，那MySQL需要查询 10030 条记录，然后抛弃前面 10000 条，返回最后30条。这样的代价是非常高的。</p><p>一个优化思路是：<strong>尽可能使用索引覆盖扫描，而不是查询所有的列，然后根据需要做一次关联操作再返回所需的列</strong>。</p><p>考虑下面的例子：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># 改写前</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> film_id, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">description</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sakila</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> title</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># 改写后</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> film</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film_id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">description</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sakila</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  INNER JOIN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> film_id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sakila</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    ORDER BY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> title</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> lim </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">USING</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(film_id);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># 另一种改写</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> film_id, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">description</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> sakila</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">film</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> film_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50000</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先快速定位需要获取的 id 段，然后再关联。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a.</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  表 </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a, </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 表 </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">20</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ) b</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> a</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">b</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化-union" tabindex="-1"><a class="header-anchor" href="#优化-union"><span>优化 UNION</span></a></h3><p>MySQL 总是通过创建并填充临时表的方式来执行 UNION。除非确实需要消除重复的行，否则一定要使用 UNION ALL，没有 ALL 时 MySQL 会给临时表加 IDSTINCT 对数据做唯一性检查，这样做的代价非常高。</p><hr><h1 id="慢查询优化" tabindex="-1"><a class="header-anchor" href="#慢查询优化"><span>慢查询优化</span></a></h1><p>1、先设置 <code>SQL_NO_CACHE</code> ，手动运行看看是否真的慢 2、将 SQL 的条件单表查，锁定最小返回记录表 3、explain 查看执行计划，是否与预期一致（从锁定记录较少的表开始查询） 4、order by limit 形式的sql语句让排序的表优先查 5、了解业务方使用场景 6、加索引时参照建索引的几大原则 7、观察结果，不符合预期继续从0分析 8、数据量太大，实在没招进行大表优化</p><p>参考：<a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-index-improve-mt.html" target="_blank" rel="noopener noreferrer">慢查询优化基本步骤</a></p><hr><h1 id="大表优化" tabindex="-1"><a class="header-anchor" href="#大表优化"><span>大表优化</span></a></h1><p>MySQL单表数据量超过500万时，性能就开始急剧下降。（非绝对，如果是固态硬盘，则好很多）</p><h2 id="限定数据的范围" tabindex="-1"><a class="header-anchor" href="#限定数据的范围"><span>限定数据的范围</span></a></h2><p>禁止不带任何限制数据范围条件的查询语句。比如：查询订单历史，我们可以控制在一个月的范围内。</p><h2 id="读-写分离" tabindex="-1"><a class="header-anchor" href="#读-写分离"><span>读/写分离</span></a></h2><p>经典的数据库拆分方案：主库负责写，从库负责读</p><h2 id="垂直拆分" tabindex="-1"><a class="header-anchor" href="#垂直拆分"><span>垂直拆分</span></a></h2><p>数据表列的拆分，把一张列比较多的表拆分为多张表</p><ul><li><strong>优点</strong>： 可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。</li><li><strong>缺点</strong>： 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂。</li></ul><h2 id="水平拆分" tabindex="-1"><a class="header-anchor" href="#水平拆分"><span>水平拆分</span></a></h2><p>数据表行的拆分，把一张表复制多份，存到不同的库上。</p><p>分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以水平拆分最好分库 。</p><p>目前流行的分片方案：</p><ul><li><strong>客户端代理</strong>：分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。 如 Sharding-JDBC</li><li><strong>中间件代理</strong>：在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。如 Mycat</li></ul><hr><h1 id="执行计划-explain" tabindex="-1"><a class="header-anchor" href="#执行计划-explain"><span>执行计划（explain）</span></a></h1><p>在一条 SQL 前面加上 <code>explain</code> 执行，即可查看执行计划。MySQL 官方对 explain 的输出有非常详细的解释，建议参阅 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener noreferrer">EXPLAIN Output Format</a>。</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_key</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>s</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>17022</td><td>Using where</td></tr></tbody></table><h2 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type"><span>select type</span></a></h2><p><code>SELECT</code> 语句的类型，如 <code>SIMPLE</code>（简单查询）、 <code>PRIMARY</code>（最外层查询）、<code>UNION</code>（UNION里的查询）、<code>SUBQUERY</code>（子查询）、<code>DERIVED</code>（派生表） 。</p><h2 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>table</span></a></h2><p>指明了是哪张表，包括别名和中间表。</p><h2 id="partitions" tabindex="-1"><a class="header-anchor" href="#partitions"><span>partitions</span></a></h2><p>非分区表显示 NULL， 分区表显示该查询在哪个分区。</p><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h2><p>join type，指出这张表是用何种方式 JOIN 的（从上往下，性能从好到差）：</p><ul><li><code>system</code>：系统表或该表只有一行数据（const的特例）</li><li><code>const</code>：常数级，表示该表最多有一个匹配行，这是最快的。通常情况下，查询条件带主键或唯一索引就是 const</li><li><code>eq_ref</code>：两张表互相一次匹配，通常在两张表主键或唯一索引 = 操作查询一条记录时</li><li><code>ref</code>：两张表按某一列关联</li><li><code>ref_or_null</code>：类似于ref，但会额外搜索包含NULL值的行</li><li><code>index_merge</code>：索引合并优化，查询使用了两个以上的索引</li><li><code>unique_subquery</code>：类似于eq_ref，条件用了in子查询</li><li><code>index_subquery</code>：区别于unique_subquery，用于非唯一索引，可以返回重复值</li><li><code>range</code>：范围查找，如 <code>between ... and</code> 或 <code>in</code></li><li><code>index</code>：全扫描覆盖索引，或全表扫描</li><li><code>all</code>：全表扫描</li></ul><p>具体描述可参阅 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener noreferrer">MySQL官方文档</a></p><h2 id="possible-keys" tabindex="-1"><a class="header-anchor" href="#possible-keys"><span>possible_keys</span></a></h2><p>可能的索引</p><h2 id="key-和-key-len" tabindex="-1"><a class="header-anchor" href="#key-和-key-len"><span>key 和 key_len</span></a></h2><p>实际使用的索引，及其长度</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h2><p>跟实际使用的索引（即key列）进行比较的列 或 常数，如果是 <code>func</code>，说明比较的是某个函数的结果</p><h2 id="rows" tabindex="-1"><a class="header-anchor" href="#rows"><span>rows</span></a></h2><p>执行这条语句 MySQL 需要扫描多少行数据</p><h2 id="filtered" tabindex="-1"><a class="header-anchor" href="#filtered"><span>filtered</span></a></h2><p>过滤百分比，该值越小越好，最大值100，表示没有过滤行</p><p>例如 rows 是 1000， filtered 是 50.00（50%），那么会有 1000 × 50% = 500 条数据会被 JOIN（估计值）</p><h2 id="extra" tabindex="-1"><a class="header-anchor" href="#extra"><span>Extra</span></a></h2><p>其他信息，如：</p><ul><li><code>Using filesort</code>：按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现。一般见于order by语句。</li><li><code>Using Where</code>：使用 where 条件过滤</li><li><code>Using Index</code>：只检索索引树，而无需回表（覆盖索引）</li><li><code>Using temporary</code>: 使用了临时表，性能差，需关注优化。一般多见于<code>group by</code> 或 <code>union</code></li><li><code>Using index condition</code>：MySQL5.6之后新增的索引下推。在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据。</li><li><code>Range checked for each record (index map: N)</code>：没找到合适的索引，但是当关联的表的列值已知后，某些索引可能可用，MySQL会对每一行组合的数据寻找合适的索引，这不是很快，但比全表扫描快</li><li><code>Select tables optimized away</code>：查询最多只返回一行，在优化器阶段就能找到记录，而无需实际执行查询（如覆盖索引），表示已经是最优化了</li></ul><hr><h1 id="碎片清理" tabindex="-1"><a class="header-anchor" href="#碎片清理"><span>碎片清理</span></a></h1><p>MySQL 上线运行久了之后，增删改比较多的表，容易产生磁盘空间碎片。因为在 MySQL 中， delete 并不会实际删除数据，只是标记删除，因而表和索引大小不会减少。这些被标记删除的数据，就成为“碎片”，当然，后续有新增数据时，部分碎片空间是可以重新利用的，但也不完全。官方建议在执行了大量 delete 后，对表进行一次碎片清理，即 <code>OPTIMIZE TABLE</code> 命令。</p><p>使用下面SQL查看各表占用的空间</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">table_name </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">表名</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">table_rows </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">记录数</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">truncate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(data_length</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">数据容量(MB)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">truncate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(index_length</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">索引容量(MB)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">truncate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(data_free</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">碎片大小(MB)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> information_schema</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">tables</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> table_schema</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">jerry</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">order by</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> data_length </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">desc</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, index_length </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">desc</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用下面SQL进行碎片整理</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mysql</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> OPTIMIZE </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> foo;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于 InnoDB 表，输出如下，表示虽然不支持 optimize ，但是 MySQL 已经帮我们执行了 recreate + analyze 代替，能达到同样的效果。所以看到这个提示不用紧张，已经成功了。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>+----------+----------+----------+-------------------------------------------------------------------+</span></span>
<span class="line"><span>| Table    | Op       | Msg_type | Msg_text                                                          |</span></span>
<span class="line"><span>+----------+----------+----------+-------------------------------------------------------------------+</span></span>
<span class="line"><span>| test.foo | optimize | note     | Table does not support optimize, doing recreate + analyze instead |</span></span>
<span class="line"><span>| test.foo | optimize | status   | OK                                                                |</span></span>
<span class="line"><span>+----------+----------+----------+-------------------------------------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p><ol><li>不需要经常执行 <code>OPTIMIZE TABLE</code>，每月一次即可，或只在有大量delete操作后</li><li>对于 InnoDB ，MySQL 5.6 以上支持 online ddl，即只在开始和结束时，短暂锁表，中间过程仍能正常查询和操作数据（如果表有 FULLTEXT 索引，则不支持 online ddl ）</li><li>分区表不适用（见下）</li></ol><h2 id="针对分区表" tabindex="-1"><a class="header-anchor" href="#针对分区表"><span>针对分区表</span></a></h2><p>对于 InnoDB 分区表，上述命令不生效，应使用下面的命令（参见 <a href="https://dev.mysql.com/doc/refman/5.7/en/partitioning-maintenance.html" target="_blank" rel="noopener noreferrer">MySQL官方文档-partitioning-maintenance</a>）</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">--- 可以使用下面命令重建分区，等于先 drop 再 insert</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t1 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">REBUILD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PARTITION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p0, p1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">--- 或者使用下面命令进行碎片整理</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t1 OPTIMIZE </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PARTITION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p0, p1; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 不要使用，Innodb 不支持部分分区 OPTIMIZE，应使用下面两个命令代替</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">REBUILD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PARTITION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p0, p1;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... ANALYZE </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PARTITION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p0, p1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">--- 清空分区数据</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t1 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TRUNCATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PARTITION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p0, p1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>参考：</p><ul><li>《高性能MySQL》第三版/第四版</li><li>《阿里巴巴Java开发手册》</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener noreferrer">MySQL官方文档-explain</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/optimize-table.html" target="_blank" rel="noopener noreferrer">MySQL官方文档-OPTIMIZE</a></li><li>https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/MySQL.md</li><li><a href="https://mp.weixin.qq.com/s/FQULojwuBvC3659ysRhAFQ" target="_blank" rel="noopener noreferrer">MySQL 索引 15 连问</a></li></ul>`,105))])}const y=k(c,[["render",g],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/db/lqfeoqeb/","title":"MySQL优化","lang":"zh-CN","frontmatter":{"title":"MySQL优化","categories":["数据库","高性能MySQL"],"tags":["database"],"abbrlink":"2bb1b1ab","createTime":"2018/9/18 20:37:38","permalink":"/db/lqfeoqeb/","description":"这一篇主要从以下几个角度谈谈 MySQL 的优化： 使用恰当的数据类型 高效索引 高效查询 大表优化（含分库分表） 执行计划 碎片清理 SQL执行过程 想要优化，先得了解一条SQL查询语句的执行过程。 MySQL 大致架构为： 客户端 --> Server层 --> 存储引擎 客户端发起一次SQL请求，会依次经过以下Server层组件： 连接器：连接器...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/db/lqfeoqeb/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"MySQL优化"}],["meta",{"property":"og:description","content":"这一篇主要从以下几个角度谈谈 MySQL 的优化： 使用恰当的数据类型 高效索引 高效查询 大表优化（含分库分表） 执行计划 碎片清理 SQL执行过程 想要优化，先得了解一条SQL查询语句的执行过程。 MySQL 大致架构为： 客户端 --> Server层 --> 存储引擎 客户端发起一次SQL请求，会依次经过以下Server层组件： 连接器：连接器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"整数类型","slug":"整数类型","link":"#整数类型","children":[]},{"level":2,"title":"实数（小数）类型","slug":"实数-小数-类型","link":"#实数-小数-类型","children":[]},{"level":2,"title":"CHAR 和 VARCHAR","slug":"char-和-varchar","link":"#char-和-varchar","children":[]},{"level":2,"title":"BLOB 和 TEXT","slug":"blob-和-text","link":"#blob-和-text","children":[]},{"level":2,"title":"枚举类代替字符串","slug":"枚举类代替字符串","link":"#枚举类代替字符串","children":[]},{"level":2,"title":"DATETIME 和 TIMESTAMP","slug":"datetime-和-timestamp","link":"#datetime-和-timestamp","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":2,"title":"单列索引","slug":"单列索引","link":"#单列索引","children":[]},{"level":2,"title":"前缀索引","slug":"前缀索引","link":"#前缀索引","children":[]},{"level":2,"title":"多列索引","slug":"多列索引","link":"#多列索引","children":[]},{"level":2,"title":"聚簇索引","slug":"聚簇索引","link":"#聚簇索引","children":[]},{"level":2,"title":"覆盖索引","slug":"覆盖索引","link":"#覆盖索引","children":[]},{"level":2,"title":"查询慢的原因","slug":"查询慢的原因","link":"#查询慢的原因","children":[]},{"level":2,"title":"重构查询的两种方法","slug":"重构查询的两种方法","link":"#重构查询的两种方法","children":[{"level":3,"title":"1.切分查询","slug":"_1-切分查询","link":"#_1-切分查询","children":[]},{"level":3,"title":"2.分解关联查询","slug":"_2-分解关联查询","link":"#_2-分解关联查询","children":[]}]},{"level":2,"title":"优化特定类型的查询","slug":"优化特定类型的查询","link":"#优化特定类型的查询","children":[{"level":3,"title":"优化COUNT()","slug":"优化count","link":"#优化count","children":[]},{"level":3,"title":"优化关联查询","slug":"优化关联查询","link":"#优化关联查询","children":[]},{"level":3,"title":"优化 GROUP BY","slug":"优化-group-by","link":"#优化-group-by","children":[]},{"level":3,"title":"优化 LIMIT 分页（深分页问题）","slug":"优化-limit-分页-深分页问题","link":"#优化-limit-分页-深分页问题","children":[]},{"level":3,"title":"优化 UNION","slug":"优化-union","link":"#优化-union","children":[]}]},{"level":2,"title":"限定数据的范围","slug":"限定数据的范围","link":"#限定数据的范围","children":[]},{"level":2,"title":"读/写分离","slug":"读-写分离","link":"#读-写分离","children":[]},{"level":2,"title":"垂直拆分","slug":"垂直拆分","link":"#垂直拆分","children":[]},{"level":2,"title":"水平拆分","slug":"水平拆分","link":"#水平拆分","children":[]},{"level":2,"title":"select type","slug":"select-type","link":"#select-type","children":[]},{"level":2,"title":"table","slug":"table","link":"#table","children":[]},{"level":2,"title":"partitions","slug":"partitions","link":"#partitions","children":[]},{"level":2,"title":"type","slug":"type","link":"#type","children":[]},{"level":2,"title":"possible_keys","slug":"possible-keys","link":"#possible-keys","children":[]},{"level":2,"title":"key 和 key_len","slug":"key-和-key-len","link":"#key-和-key-len","children":[]},{"level":2,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":2,"title":"rows","slug":"rows","link":"#rows","children":[]},{"level":2,"title":"filtered","slug":"filtered","link":"#filtered","children":[]},{"level":2,"title":"Extra","slug":"extra","link":"#extra","children":[]},{"level":2,"title":"针对分区表","slug":"针对分区表","link":"#针对分区表","children":[]}],"readingTime":{"minutes":19.02,"words":5706},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/db/2.MySQL/1.MySQL优化.md"}');export{y as comp,o as data};
