import{_ as s,c as a,f as n,o as e}from"./app-D22ydJtp.js";const l={};function t(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="_1-mvc-结构流程" tabindex="-1"><a class="header-anchor" href="#_1-mvc-结构流程"><span>1. MVC 结构流程</span></a></h1><ol><li>Web浏览器发送HTTP请求到服务端，被Controller(Servlet)获取并进行处理（例如参数解析、请求转发）</li><li>Controller 调用核心业务逻辑——Model部分</li><li>Model进行数据库存取操作，并将操作结果返回</li><li>Controller 将业务逻辑处理结果交给View（JSP），动态输出HTML内容</li><li>动态生成的HTML内容返回到浏览器显示</li></ol><h1 id="_2-什么是-ioc" tabindex="-1"><a class="header-anchor" href="#_2-什么是-ioc"><span>2. 什么是 Ioc ？</span></a></h1><p>Ioc（Inversion of Control）是控制反转，具体做法的依赖注入（DI，Dependency Inject）。即 <strong>某一接口的实现类的选择控制权从调用类中移除，转交由第三方决定</strong>，当需要的时候，由第三方进行注入，而不由调用类 new，这就是反转控制。</p><p>Spring 提供了一个反转控制容器，当我们要使用某个对象，只需要从 Spring 容器中获取需要使用的对象，不关心对象的创建过程，把创建对象的控制权反转给了 Spring 框架，而 Spring 容器是通过 DI，在创建对象的过程中将对象依赖属性（简单值，集合，对象）通过配置设值给该对象。</p><h1 id="_3-ioc是如何实现的" tabindex="-1"><a class="header-anchor" href="#_3-ioc是如何实现的"><span>3. Ioc是如何实现的?</span></a></h1><ol><li>读取注解或者配置文件，看看 bean 依赖的是哪个Source，拿到类名</li><li>使用反射的API，基于类名实例化对应的对象实例</li><li>将对象实例通过构造函数或者 setter，注入给 bean</li></ol><h1 id="_4-什么是-aop" tabindex="-1"><a class="header-anchor" href="#_4-什么是-aop"><span>4. 什么是 AOP ？</span></a></h1><p>Aspect Oriented Program，面向切面编程。即把功能分为 核心业务功能 和 周边功能。两者分别独立进行开发，然后把切面功能和核心业务功能 “编织” 在一起。</p><p>AOP 的好处是允许我们把遍布应用各处的功能分离出来形成可重用的组件。</p><h1 id="_5-什么是-spring-boot" tabindex="-1"><a class="header-anchor" href="#_5-什么是-spring-boot"><span>5. 什么是 Spring Boot ？</span></a></h1><p>Spring Boot并不是什么新的框架，而是默认配置了很多框架的使用方式，就像 Maven 整合了所有的 jar 包一样，Spring Boot 整合了大部分框架，比如Mybatis、Hibernate、Spring MVC。</p><p>Spring Boot使用 “习惯优于配置” （项目中存在大量的配置，此外还内置一个习惯性的配置）的理念让你的项目快速运行起来。</p><h1 id="_6-什么是-spring" tabindex="-1"><a class="header-anchor" href="#_6-什么是-spring"><span>6. 什么是 Spring ？</span></a></h1><p>Spring 是一个开源框架大家族，包含很多子项目，例如 Spring Core、Spring data、Spring Web MVC 以及最新的 Spring Boot 和 Spirng Could。它的核心理念是 依赖注入 和 面向切面。</p><p>传统的 Java 项目，类和类之间经常有依赖关系，一般调用类通过 new 关键字构造依赖类的实例。当工程变大，依赖关系会变得十分复杂，使项目难以维护。Spring 提供了依赖注入容器，相当于在 Java 类当中充当一个中间人，管理着类与类之间的依赖关系。</p><h1 id="_7-什么是-spring-cloud" tabindex="-1"><a class="header-anchor" href="#_7-什么是-spring-cloud"><span>7. 什么是 Spring Cloud ？</span></a></h1><p>Spring Cloud是一套分布式服务治理的框架。可以理解成是一个注册中心，提供如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等。</p><p>Spring Cloud + Spring Boot 非常适合做微服务架构，Boot的轻量级适合开发单个微服务，多个服务再统一在 Cloud 中注册。</p><h1 id="_8-beanfactory-和-applicationcontext-的区别" tabindex="-1"><a class="header-anchor" href="#_8-beanfactory-和-applicationcontext-的区别"><span>8. BeanFactory 和 ApplicationContext 的区别</span></a></h1><p>一般称 BeanFactory 为 IoC 容器，而 ApplicationContext 为应用上下文。</p><p>BeanFactory 是解析、管理、实例化所有容器的 Bean 的入口，<strong>面向 Spring 本身</strong>。且是 Spring Framework 最核心的接口，提供了高级的 Ioc 配置机制，使管理不同类型的 Java 对象成为可能。</p><p>ApplicationContext <strong>面向框架的开发者</strong>，提供国际化支持、统一的资源文件读取方式、框架事件体系等。</p><p>BeanFactory 在启动的时候不会实例化Bean，getBean() 的时候才会实例化。ApplicationContext在解析配置文件时会对配置文件所有对象都初始化（默认情况下）。</p><h1 id="_9-spring-bean的5种作用域-scope" tabindex="-1"><a class="header-anchor" href="#_9-spring-bean的5种作用域-scope"><span>9. Spring Bean的5种作用域(Scope)</span></a></h1><p>在 applicationContext.xml 中声明 scope:</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">bean</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> scope</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">singleton</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">io.jerrysheh.Hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">bean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>singleton</strong>: 是 Spring Bean 的默认配置，这个 Bean 在 Spring 容器是 单例 的。</li><li><strong>prototype</strong>: 和 singleton 相反，为每个 Bean 请求提供一个 Bean 实例</li><li><strong>request</strong>：在请求 Bean 范围内会给每个客户端的网络请求创建一个实例，请求结束之后会回收</li><li><strong>session</strong>: 在每个 session 中有一个 Bean 的实例，session 结束后回收</li><li><strong>global-session</strong>: 所有 Portlet 共享的 Bean</li></ol><p>注意，Singleton Bean不是线程安全的，需要自行保证线程安全。</p><h1 id="_10-spring-的5种自动装配模式" tabindex="-1"><a class="header-anchor" href="#_10-spring-的5种自动装配模式"><span>10. Spring 的5种自动装配模式</span></a></h1><ol><li><strong>no</strong>：Spring 框架的默认设置，开发者要在 Bean 中明确定义依赖</li><li><strong>byName</strong>：在配置文件中查找相同名字的 Bean 进行装配</li><li><strong>byType</strong>：在配置文件中查找相同类型的 Bean 进行装配</li><li><strong>constructor</strong>：寻找有相同构造参数的 Bean 进行装配</li><li><strong>autodetect</strong>：先尝试以 constructor 的方法进行装配，失败后 byType 进行装配</li></ol><h1 id="_11-springmvc处理请求的流程" tabindex="-1"><a class="header-anchor" href="#_11-springmvc处理请求的流程"><span>11. SpringMVC处理请求的流程</span></a></h1><ol><li>用户发送请求，被DispatcherServlet拦截，DispatcherServlet收到请求之后自己不处理，而是交给其他的Handler进行处理</li><li>DispatcherServlet初始化HandlerMapping，HandlerMapping会把请求映射成一个HandlerExecutionChain对象，这个对象包括一个Handler和多个Interceptor，然后把这个Handler适配成HandlerAdapter</li><li>DispatcherServlet传过来的请求会和HandlerAdapter进行适配，先要进行一些数据转换，然后调用HandlerAdapter的handle()，返回一个ModelAndView对象</li><li>mv.render()，通过ViewResolver进行渲染，把刚才HandlerAdapter返回的Model渲染到View上</li><li>最后进行请求的转发</li></ol><h1 id="_12-什么是微服务" tabindex="-1"><a class="header-anchor" href="#_12-什么是微服务"><span>12. 什么是微服务？</span></a></h1><p>微服务是一个松耦合的分布式服务。微服务允许将一个大型的应用分解成许多独立的组件，每个组件单独部署。</p><h2 id="微服务有什么好处" tabindex="-1"><a class="header-anchor" href="#微服务有什么好处"><span>微服务有什么好处？</span></a></h2><ul><li><strong>职责明确</strong>：细粒度组件，组件职责领域明确，并且可以完全独立部署</li><li><strong>组件复用</strong>：一个微服务组件可以跨多个应用程序复用</li><li><strong>通信规范</strong>：组件之间通过 HTTP 、JSON 进行轻量级通信</li><li><strong>底层透明</strong>：一个服务的底层用什么技术实现并没有什么影响，不同的开发小组可以用不同的技术栈</li></ul><hr><h1 id="_13-什么是rest" tabindex="-1"><a class="header-anchor" href="#_13-什么是rest"><span>13. 什么是REST</span></a></h1><p>REST（Representational State Transfer）省略了主语 Resource，翻译成中文是：资源表述性状态转移。简单地说，就是用 URI 来定位资源，用 http 方法（GET、POST、DELETE、PUT等动词）来表示行为，用 http 状态码来表示结果。</p><hr><h1 id="_14-aop底层怎么实现-两种代理有什么区别" tabindex="-1"><a class="header-anchor" href="#_14-aop底层怎么实现-两种代理有什么区别"><span>14. AOP底层怎么实现？两种代理有什么区别？</span></a></h1><p>AOP底层实现是动态代理。</p><h2 id="什么是动态代理" tabindex="-1"><a class="header-anchor" href="#什么是动态代理"><span>什么是动态代理</span></a></h2><p>动态代理，即利用 Java 的反射技术(Java Reflection)，在运行时创建一个新类（也称“动态代理类”）及其实例，来代替原有类和实例。</p><p>动态代理用来解决三类问题：</p><ol><li>一个接口的实现类在编译时无法知道，需要在运行时才能知道的问题；</li><li>实现某些设计模式，如适配器(Adapter)或修饰器(Decorator)</li><li>实现面向切面编程：如 AOP in Spring</li></ol><h2 id="aop底层的两种代理和区别" tabindex="-1"><a class="header-anchor" href="#aop底层的两种代理和区别"><span>AOP底层的两种代理和区别？</span></a></h2><ul><li>JDK动态代理：利用拦截器(实现InvocationHanlder)和反射机制，生成一个实现代理接口的匿名类，在调用具体方法前调用 InvokeHandler 来处理。</li><li>Cglib动态代理：运行时动态生成被代理类的子类， overwrite 父类方法调用（因此不能代理声明为final类型的类和方法）。将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</li></ul><p>JDK动态代理代理的是接口，Cglib代理的是类。</p><hr><h1 id="_15-springmvc启动会加装几种容器-他们的关系是怎样的" tabindex="-1"><a class="header-anchor" href="#_15-springmvc启动会加装几种容器-他们的关系是怎样的"><span>15. SpringMVC启动会加装几种容器？他们的关系是怎样的？</span></a></h1><p>todo</p><hr><h1 id="_16-springmvc-如何知道要加装的-spring-配置在哪里" tabindex="-1"><a class="header-anchor" href="#_16-springmvc-如何知道要加装的-spring-配置在哪里"><span>16. SpringMVC 如何知道要加装的 Spring 配置在哪里？</span></a></h1><p>todo</p><hr><h1 id="_17-spring-容器创建对象的时机" tabindex="-1"><a class="header-anchor" href="#_17-spring-容器创建对象的时机"><span>17. Spring 容器创建对象的时机</span></a></h1><p>默认情况下，当我们启动 Spring applicationContext 时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ApplicationContext</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">applicationContext.xml</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>applicationContext 会去寻找 applicationContext.xml 配置文件，里面有许多 <code>&lt;bean&gt;</code> 的定义，遇到 <code>&lt;bean&gt;</code> 时就创建对象。</p><p>当我们给 bean 加上 <code>lazy-init=&quot;true&quot;</code> 属性</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">bean</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  id</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> lazy-init</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">io.jerrysheh.Hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">bean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则在应用中，遇到 getBean 时才创建。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Hello</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Hello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getBean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h1 id="_18-autowired-自动装配如果有多个符合的bean" tabindex="-1"><a class="header-anchor" href="#_18-autowired-自动装配如果有多个符合的bean"><span>18. AutoWired 自动装配如果有多个符合的bean</span></a></h1><p>在 Service 层自动注入一个 Dao，通常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Service</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PersonService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">AutoWired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PersonDao</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> personDao</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 PersonDao 有多个实现如何解决？</p><p>第一种方法，改名字，改为实现类的名字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">AutoWired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PersonDao</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> personMysqlDaoImpl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">AutoWired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PersonDao</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> personOracleDaoImpl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方法，配合 <code>@Qualifier</code> 注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">AutoWired</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Qualifier</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">personMysqlDaoImpl</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PersonDao</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> personDao</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="_19-transational-什么时候注解会失效" tabindex="-1"><a class="header-anchor" href="#_19-transational-什么时候注解会失效"><span>19. @Transational 什么时候注解会失效？</span></a></h1><ol><li>数据库引擎本身不支持事务（如MySQL MyISAM）</li><li>类没有被 Spring 管理</li><li>private 方法</li><li>自己调自己</li><li>数据源没有配事务管理器</li><li>标记了 <code>Propagation.NOT_SUPPORTED</code></li><li>try-catch</li><li>异常被转换（try-catch后又 throw 一个 非runtimeException ）</li></ol><h2 id="为什么-private-方法会失效" tabindex="-1"><a class="header-anchor" href="#为什么-private-方法会失效"><span>为什么 private 方法会失效？</span></a></h2><p><code>@Transational</code> 本质是动态代理，通过反射在方法前后织入开启事务、结束事务的代码， private 方法无法被反射获取。</p><h2 id="为什么自己调自己会失效" tabindex="-1"><a class="header-anchor" href="#为什么自己调自己会失效"><span>为什么自己调自己会失效？</span></a></h2><p>自己调自己，调的不是代理类，而是原类。解决办法：<code>((A)AopContext.currentProxy).b()</code></p><p>原类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        insert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理后的类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Proxy$A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     A</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">     a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">         a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">     b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        startTransaction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">       }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">RuntimeException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">         rollBack</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">       }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> finally</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        endTransaction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">       }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85)]))}const r=s(l,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/interview/spring/","title":"Spring了然于心","lang":"zh-CN","frontmatter":{"title":"Spring了然于心","createTime":"2018/10/11 21:13:51","permalink":"/interview/spring/","description":"1. MVC 结构流程 Web浏览器发送HTTP请求到服务端，被Controller(Servlet)获取并进行处理（例如参数解析、请求转发） Controller 调用核心业务逻辑——Model部分 Model进行数据库存取操作，并将操作结果返回 Controller 将业务逻辑处理结果交给View（JSP），动态输出HTML内容 动态生成的HTML...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/interview/spring/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"Spring了然于心"}],["meta",{"property":"og:description","content":"1. MVC 结构流程 Web浏览器发送HTTP请求到服务端，被Controller(Servlet)获取并进行处理（例如参数解析、请求转发） Controller 调用核心业务逻辑——Model部分 Model进行数据库存取操作，并将操作结果返回 Controller 将业务逻辑处理结果交给View（JSP），动态输出HTML内容 动态生成的HTML..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T15:38:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T15:38:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring了然于心\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-23T15:38:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"微服务有什么好处？","slug":"微服务有什么好处","link":"#微服务有什么好处","children":[]},{"level":2,"title":"什么是动态代理","slug":"什么是动态代理","link":"#什么是动态代理","children":[]},{"level":2,"title":"AOP底层的两种代理和区别？","slug":"aop底层的两种代理和区别","link":"#aop底层的两种代理和区别","children":[]},{"level":2,"title":"为什么 private 方法会失效？","slug":"为什么-private-方法会失效","link":"#为什么-private-方法会失效","children":[]},{"level":2,"title":"为什么自己调自己会失效？","slug":"为什么自己调自己会失效","link":"#为什么自己调自己会失效","children":[]}],"readingTime":{"minutes":7.99,"words":2397},"git":{"createdTime":1729697898000,"updatedTime":1729697898000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/interview/spring/index.md"}');export{r as comp,d as data};
