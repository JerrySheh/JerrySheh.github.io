import{_ as l,c as h,a,b as n,d as e,e as s,f as r,r as p,o as c}from"./app-D22ydJtp.js";const d="/images/Java/Spring.png",g={};function k(B,i){const o=p("RouteLink"),t=p("font");return c(),h("div",null,[i[7]||(i[7]=a("p",null,[a("img",{src:d,alt:"Spring"})],-1)),a("p",null,[i[1]||(i[1]=n("在 ")),e(o,{to:"/java/zgkjulau/"},{default:s(()=>i[0]||(i[0]=[n("Spring（一）从 传统Java Web到SpirngBoot")])),_:1}),i[2]||(i[2]=n(" 中对 Ioc 的概念已经有了初步认识：Spring 通过一个配置文件描述 Bean 与 Bean 之间的依赖关系，利用 Java 的类加载器和反射机制实例化 Bean 并建立 Bean 之间的依赖关系。"))]),i[8]||(i[8]=r('<p>我们将调用类对某一接口实现类的依赖关系交由 Spring 容器管理，容器在我们需要的时候，通过注入及时地将对象进行实例化并装配好 bean，无需我们自己 new 。</p><p>除此之外，由于JDK提供的访问资源的类对底层资源并不友好，缺少从类路径或者Web容器的上下文获取资源的操作类，<strong>Spring重新设计了一个 Resource 接口</strong>，用于更强的底层资源访问能力。有了这个资源类，就可以将Spring的配置信息放在任何地方（数据库、LDAP）。而为了访问不同类型的资源，<strong>Spring还提供了一个强大的加载资源的机制</strong>，定义了一套资源加载的接口 ResourceLoader 及其实现类，可以访问包括<code>classpath:</code>、<code>file:</code>、<code>http://</code>、<code>ftp://</code>等地址前缀资源。</p><p>这一篇具体讲讲关于 Spring Ioc的更多内容。</p><hr><h1 id="beanfactory-和-applicationcontext" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext"><span>BeanFactory 和 ApplicationContext</span></a></h1><p>一般称 BeanFactory 为 IoC 容器，而 ApplicationContext 为应用上下文。</p><h2 id="beanfactory" tabindex="-1"><a class="header-anchor" href="#beanfactory"><span>BeanFactory</span></a></h2><p>BeanFactory（com.springframework.beans.factory.BeanFactory）是 Spring Framework 最核心的接口，提供了高级的 Ioc 配置机制，使管理不同类型的 Java 对象成为可能。</p><p>在设计模式中有工厂模式，BeanFactory就是一个类工厂，它是一个通用工厂，可以创建并管理各种类的对象。这些对象都是普通的 pojo ，Spring 称这些对象为 bean 。BeanFactory 在启动的时候不会实例化Bean，getBean()的时候才会实例化。</p><blockquote><p>Spring中的 bean 跟 javabean 的区别： javabean 需要满足一定的规范，但 Spring 中只要能被 Spring 容器实例化并管理的对象都称为 bean。</p></blockquote>',10)),a("p",null,[i[4]||(i[4]=n("BeanFactory 是 Spring Framework 的基础设施，它是解析、管理、实例化所有容器的 Bean 的入口，")),e(t,{color:"red"},{default:s(()=>i[3]||(i[3]=[n("BeanFactory 面向 Spring 本身")])),_:1}),i[5]||(i[5]=n("。"))]),i[9]||(i[9]=a("h2",{id:"applicationcontext",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#applicationcontext"},[a("span",null,"ApplicationContext")])],-1)),i[10]||(i[10]=a("p",null,"ApplicationContext（com.springframework.context.ApplicationContext）在 BeanFactory 的基础上提供更多面向应用的功能：国际化支持、统一的资源文件读取方式、框架事件体系等。",-1)),e(t,{color:"red"},{default:s(()=>i[6]||(i[6]=[n("ApplicationContext 面向框架的开发者")])),_:1}),i[11]||(i[11]=r(`，几乎所有的应用场合都可以直接使用 ApplicationContext 而非底层的 BeanFactory。ApplicationContext在解析配置文件时会对配置文件所有对象都初始化。<p>如果把 BeanFactory 比喻成“心脏”，那么 ApplicationContext 就是 “身躯”。</p><h3 id="applicationcontext-类体系结构" tabindex="-1"><a class="header-anchor" href="#applicationcontext-类体系结构"><span>ApplicationContext 类体系结构</span></a></h3><p>待补充。</p><p>Spring支持类注解的配置方式，主要功能来自 Spring 的一个子项目 JavaConfig。</p><h3 id="webapplicationcontext-类体系结构" tabindex="-1"><a class="header-anchor" href="#webapplicationcontext-类体系结构"><span>WebApplicationContext 类体系结构</span></a></h3><p>待补充。</p><hr><h1 id="父子容器" tabindex="-1"><a class="header-anchor" href="#父子容器"><span>父子容器</span></a></h1><p>通过 HierarchicalBeanFactory 接口， Spirng IoC 容器可以建立父子层级关联的容器体系。子容器可以访问父容器的 Bean， 但反过来则不行。这种体系增强了 Spring 容器架构的扩展性和灵活性。我们可以通过编程的方式为一个已存在的容器添加一个或多个由特殊用途的子容器。</p><p>例如，在 Spring MVC 中，表现层位于一个子容器中， 业务逻辑层 和 数据访问层 位于父容器中。这样，表现层可以引用业务逻辑层和数据访问层的 Bean，而业务逻辑层和数据访问层看不到表现层的 Bean。</p><hr><h1 id="ioc容器的初始化" tabindex="-1"><a class="header-anchor" href="#ioc容器的初始化"><span>IoC容器的初始化</span></a></h1><p>IOC容器的初始化的入口是<code>refresh()</code></p><ol><li>先进行 Resource 的定位与载入，由 ResourceLoader 完成</li><li>载入 BeanDefinition，这个载入过程就是把用户定义的 Bean 转换成 Bean 容器中的数据结构 BeanDefinition。BeanDefinition 的载入第一步是调用SAX进行解析得到 Document 对象，然后用一个 DocumentReader 进行解析，解析完的结果由个BeanDefinitionHolder对象持有</li><li>向IOC容器中注入载入后的 BeanDefinition，这个过程是通过BeanDefinitionRegistry实现的，实际上是注册到一个ConcurrentHashMap中</li></ol><hr><h1 id="bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#bean-的生命周期"><span>Bean 的生命周期</span></a></h1><ol><li>实例化：Spring通过一定的策略实例化 Bean。</li><li>填入属性：spring 将 值 和 bean 引用注入到 bean 的属性中。</li><li>如果 Bean 实现了 BeanNameAware 接口，工厂调用 Bean 的 setBeanName() 方法传递 Bean 的 ID。</li><li>如果 Bean 实现了 BeanFactoryAware 接口，工厂调用 setBeanFactory() 方法传入工厂自身。</li><li>如果实现了 ApplicationContextAware 接口, spring 将调用 setApplicationContext() 方法，将 bean 所在的上下文的引用进来。</li><li>如果 BeanPostProcessor 和 Bean 关联，那么它们的 postProcessBeforeInitialization() 方法将被调用。</li><li>如果 Bean 指定了 init-method 方法，该方法将被调用。</li><li>如果有 BeanPostProcessor 和 Bean 关联，那么它们的 postProcessAfterInitialization() 方法将被调用</li><li>如果配置了 destroy-method 方法则注册 DisposableBean</li><li>使用：到这个时候，Bean已经可以被应用系统使用了，并且将被保留在Bean Factory中直到它不再需要。</li><li>销毁。如果 Bean 实现了 DisposableBean 接口，销毁时就调用其 destroy 方法。</li></ol><p>销毁方法：</p><ol><li>如果 Bean 实现了 DisposableBean 接口，destory()方法被调用。</li><li>如果指定了订制的销毁方法，就调用这个方法。destory-method() 配置时指定。</li></ol><hr><h1 id="spring-bean-的作用域" tabindex="-1"><a class="header-anchor" href="#spring-bean-的作用域"><span>Spring Bean 的作用域</span></a></h1><ol><li><strong>singleton</strong>: 是 Spring Bean 的默认配置，这个 Bean 在 Spring 容器是 <strong>单例</strong> 的</li><li><strong>prototype</strong>: 和 singleton 相反，为每个 Bean 请求提供一个 Bean 实例</li><li><strong>request</strong>：在请求 Bean 范围内会给每个客户端的网络请求创建一个实例，请求结束之后会回收</li><li><strong>session</strong>: 在每个 session 中有一个 Bean 的实例，session 结束后回收</li><li><strong>global-session</strong>: 所有 Portlet 共享的 Bean</li></ol><h2 id="spring-boot-如何修改-bean-的作用域" tabindex="-1"><a class="header-anchor" href="#spring-boot-如何修改-bean-的作用域"><span>Spring Boot 如何修改 bean 的作用域 ？</span></a></h2><p>加 <code>@Scope()</code> 注解即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Bean</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">singleton</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Person </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">personSingleton</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="spring-自动装配模式" tabindex="-1"><a class="header-anchor" href="#spring-自动装配模式"><span>Spring 自动装配模式</span></a></h2><p>Spring容器可以自动配置相互协作beans之间的关联关系。这意味着Spring可以自动配置一个bean和其他协作bean之间的关系，通过检查 BeanFactory 的内容里没有使用和&lt; property&gt;元素。</p><ol><li><strong>no</strong>：Spring 框架的默认设置，开发者要在 Bean 中明确定义依赖</li><li><strong>byName</strong>：在配置文件中查找相同名字的 Bean 进行装配</li><li><strong>byType</strong>：在配置文件中查找相同类型的 Bean 进行装配</li><li><strong>constructor</strong>：寻找有相同构造参数的 Bean 进行装配</li><li><strong>autodetect</strong>：先尝试以 constructor 的方法进行装配，失败后 byType 进行装配</li></ol><hr><h1 id="在spring中注入java集合类" tabindex="-1"><a class="header-anchor" href="#在spring中注入java集合类"><span>在Spring中注入Java集合类</span></a></h1><p>Spring 提供如下几种类型的集合配置元素：</p><ul><li>list元素用来注入一系列的值，允许有相同的值。</li><li>set元素用来注入一些列的值，不允许有相同的值。</li><li>map用来注入一组”键-值”对，键、值可以是任何类型的。</li><li>props也可以用来注入一组”键-值”对，这里的键、值都字符串类型。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">UserService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userServices</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">DemoService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> demoServiceMap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35))])}const b=l(g,[["render",k],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/java/9j76ay5j/","title":"Spirng（六） IoC容器探究","lang":"zh-CN","frontmatter":{"title":"Spirng（六） IoC容器探究","comments":true,"categories":["Java Web","Spring"],"tags":["Java","Web"],"abbrlink":"fd78ec01","createTime":"2018/07/09 22:33:32","permalink":"/java/9j76ay5j/","description":"Spring 在 中对 Ioc 的概念已经有了初步认识：Spring 通过一个配置文件描述 Bean 与 Bean 之间的依赖关系，利用 Java 的类加载器和反射机制实例化 Bean 并建立 Bean 之间的依赖关系。 我们将调用类对某一接口实现类的依赖关系交由 Spring 容器管理，容器在我们需要的时候，通过注入及时地将对象进行实例化并装配好 b...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/java/9j76ay5j/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"Spirng（六） IoC容器探究"}],["meta",{"property":"og:description","content":"Spring 在 中对 Ioc 的概念已经有了初步认识：Spring 通过一个配置文件描述 Bean 与 Bean 之间的依赖关系，利用 Java 的类加载器和反射机制实例化 Bean 并建立 Bean 之间的依赖关系。 我们将调用类对某一接口实现类的依赖关系交由 Spring 容器管理，容器在我们需要的时候，通过注入及时地将对象进行实例化并装配好 b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/Java/Spring.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Web"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spirng（六） IoC容器探究\\",\\"image\\":[\\"https://jerrysheh.com/images/Java/Spring.png\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"BeanFactory","slug":"beanfactory","link":"#beanfactory","children":[]},{"level":2,"title":"ApplicationContext","slug":"applicationcontext","link":"#applicationcontext","children":[{"level":3,"title":"ApplicationContext 类体系结构","slug":"applicationcontext-类体系结构","link":"#applicationcontext-类体系结构","children":[]},{"level":3,"title":"WebApplicationContext 类体系结构","slug":"webapplicationcontext-类体系结构","link":"#webapplicationcontext-类体系结构","children":[]}]},{"level":2,"title":"Spring Boot 如何修改 bean 的作用域 ？","slug":"spring-boot-如何修改-bean-的作用域","link":"#spring-boot-如何修改-bean-的作用域","children":[]},{"level":2,"title":"Spring 自动装配模式","slug":"spring-自动装配模式","link":"#spring-自动装配模式","children":[]}],"readingTime":{"minutes":5.92,"words":1776},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/java/6.spring/6.Spirng（六）-IoC容器探究.md"}');export{b as comp,m as data};
