import{_ as i}from"./BST-C-taVy5_.js";import{_ as a,c as t,f as n,o as e}from"./app-D22ydJtp.js";const l="/images/DataStructure/tree.png",h="/images/DataStructure/BinaryTree.png",p="/images/DataStructure/traversing.png",r={};function k(d,s){return e(),t("div",null,s[0]||(s[0]=[n('<p>我们知道，链表是一种线性递归的数据结构。前一个结点指向后一个结点，线性地链接起来。树跟链表类似，只不过树的结点与结点之间，不再是单个线性地链接，而是一个结点可以指向多个其他结点。</p><h1 id="什么是树" tabindex="-1"><a class="header-anchor" href="#什么是树"><span>什么是树</span></a></h1><p><img src="'+l+'" alt=""></p><h2 id="树的相关术语" tabindex="-1"><a class="header-anchor" href="#树的相关术语"><span>树的相关术语</span></a></h2><ul><li><strong>根节点</strong>：根节点是一个没有双亲结点的结点，一棵树中最多有一个根节点</li><li><strong>边</strong>：双亲结点到孩子结点的链接</li><li><strong>叶子结点</strong>：没有孩子结点的结点</li><li><strong>兄弟结点</strong>：拥有相同双亲结点的所有孩子结点</li><li><strong>祖先结点</strong>：如果存在一条从根节点到结点q的路径，其结点p出现在这条路径上，那么就可以吧结点p叫作结点q的祖先结点，结点q也叫做p的子孙结点</li><li><strong>结点的大小</strong>：结点的大小是指子孙的个数，包括其自身</li><li><strong>树的层</strong>：位于相同深度的所有结点的集合叫作树的层</li><li><strong>结点的深度</strong>：是指从根节点到该节点的路径长度（上图G点的深度为2，A—C—G）</li><li><strong>结点的高度</strong>：结点到树中最深结点的路径长度，只含有根节点的树的高度为0。（B的高度为2，B—F—J）</li></ul><hr><h1 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h1><p>如果一棵树中所有的结点都只有0，1 或者 2个孩子结点，那么这棵树就是二叉树。</p><p><img src="'+h+'" alt="BinaryTree"></p><h2 id="二叉树的应用" tabindex="-1"><a class="header-anchor" href="#二叉树的应用"><span>二叉树的应用</span></a></h2><ul><li>编译器中的表达式树</li><li>用于数据压缩算法中的赫夫曼编码树</li><li>支持在集合中查找、插入和删除，其平均时间复杂度为O(lognn)的二叉搜索树（BST）</li><li>优先队列（PQ），它支持以对数时间（最坏情况下）对集合中的最小（或最大）数据元素进行搜索和删除</li></ul><h2 id="遍历二叉树" tabindex="-1"><a class="header-anchor" href="#遍历二叉树"><span>遍历二叉树</span></a></h2><p>访问树中所有结点的过程叫作树的遍历。如果用递归的思想去进行遍历就不难理解了。</p><p><img src="'+p+`" alt="traversing"></p><h3 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历"><span>前序遍历</span></a></h3><p>前序遍历的规则如下：</p><ol><li>访问根节点；</li><li>按前序遍历方式遍历左子树；</li><li>按前序遍历方式遍历右子树.</li></ol><p>上图使用前序遍历的结果为： 1 2 4 5 3 6 7</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> preOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BinaryTreeNode root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        preOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLeft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        preOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历"><span>中序遍历</span></a></h3><p>中序遍历的规则如下：</p><ol><li>按中序遍历方式遍历左子树；</li><li>访问根节点；</li><li>按中序遍历方式遍历右子树.</li></ol><p>上图使用中序遍历的结果为：4 2 5 1 6 3 7</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> inOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BinaryTreeNode root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        inOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLeft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        inOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历"><span>后序遍历</span></a></h3><p>后序遍历的规则如下：</p><ol><li>按后序遍历方式遍历左子树；</li><li>按后序遍历方式遍历右子树；</li><li>访问根节点.</li></ol><p>上图使用后序遍历的结果为：4 5 2 6 7 3 1</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> postOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BinaryTreeNode root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        postOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLeft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        postOrder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getRight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="二叉搜索树-bst" tabindex="-1"><a class="header-anchor" href="#二叉搜索树-bst"><span>二叉搜索树(BST)</span></a></h1><p>二叉搜索树，又称二叉查找树（Binary Search Tree, BST），是一种所有左子树结点的元素小于根节点的数据，所有右子树结点的元素大于根节点数据的二叉树。</p><p><img src="`+i+'" alt="BST"></p>',33)]))}const c=a(r,[["render",k],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/data-structure/cvga2thx/","title":"数据结构（七）树和二叉树","lang":"zh-CN","frontmatter":{"title":"数据结构（七）树和二叉树","comments":true,"categories":"数据结构和算法","tags":["数据结构和算法"],"abbrlink":"f65fff79","createTime":"2018/07/29 21:12:18","permalink":"/data-structure/cvga2thx/","description":"我们知道，链表是一种线性递归的数据结构。前一个结点指向后一个结点，线性地链接起来。树跟链表类似，只不过树的结点与结点之间，不再是单个线性地链接，而是一个结点可以指向多个其他结点。 什么是树 树的相关术语 根节点：根节点是一个没有双亲结点的结点，一棵树中最多有一个根节点 边：双亲结点到孩子结点的链接 叶子结点：没有孩子结点的结点 兄弟结点：拥有相同双亲结...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/data-structure/cvga2thx/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"数据结构（七）树和二叉树"}],["meta",{"property":"og:description","content":"我们知道，链表是一种线性递归的数据结构。前一个结点指向后一个结点，线性地链接起来。树跟链表类似，只不过树的结点与结点之间，不再是单个线性地链接，而是一个结点可以指向多个其他结点。 什么是树 树的相关术语 根节点：根节点是一个没有双亲结点的结点，一棵树中最多有一个根节点 边：双亲结点到孩子结点的链接 叶子结点：没有孩子结点的结点 兄弟结点：拥有相同双亲结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://jerrysheh.com/images/DataStructure/tree.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"数据结构和算法"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构（七）树和二叉树\\",\\"image\\":[\\"https://jerrysheh.com/images/DataStructure/tree.png\\",\\"https://jerrysheh.com/images/DataStructure/BinaryTree.png\\",\\"https://jerrysheh.com/images/DataStructure/traversing.png\\",\\"https://jerrysheh.com/images/DataStructure/BST.png\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"树的相关术语","slug":"树的相关术语","link":"#树的相关术语","children":[]},{"level":2,"title":"二叉树的应用","slug":"二叉树的应用","link":"#二叉树的应用","children":[]},{"level":2,"title":"遍历二叉树","slug":"遍历二叉树","link":"#遍历二叉树","children":[{"level":3,"title":"前序遍历","slug":"前序遍历","link":"#前序遍历","children":[]},{"level":3,"title":"中序遍历","slug":"中序遍历","link":"#中序遍历","children":[]},{"level":3,"title":"后序遍历","slug":"后序遍历","link":"#后序遍历","children":[]}]}],"readingTime":{"minutes":2.91,"words":874},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/data-structure/7.数据结构（七）树和二叉树.md"}');export{c as comp,y as data};
