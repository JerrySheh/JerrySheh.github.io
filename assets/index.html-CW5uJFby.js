import{_ as i,c as d,f as o,a,b as n,d as s,e as t,r as p,o as l}from"./app-D22ydJtp.js";const h={};function c(g,e){const r=p("RouteLink");return l(),d("div",null,[e[8]||(e[8]=o('<p>工作中时常会遇到产品或其他同学询问一些计算机术语，例如上次有个开发跟我对接某接口时，说给我传输了图片的 「base64编码」串，我需要先解码后使用...</p><p>我当然可以很熟练地在封装好的代码中直接输入<code>Base64.getDecoder().decode(encodedString)</code> 顺利交差，但是话说回来，base64到底是个啥玩意？如果遇到一个产品同学过来问我，我该如何用他能够理解的语言描述这个术语的含义呢？于是就想到，不妨编一个计算机术语速查手册，把我遇到的术语都记录下来吧。</p><blockquote><p>提示：本手册的初衷是面向非专业人员介绍专业术语，所以会尽量描述得通俗，可能存在不严谨的地方，请谨慎参考。</p></blockquote><hr><h3 id="计算机基础" tabindex="-1"><a class="header-anchor" href="#计算机基础"><span><strong>计算机基础</strong></span></a></h3><h4 id="句柄-handle" tabindex="-1"><a class="header-anchor" href="#句柄-handle"><span><strong>句柄（handle）</strong></span></a></h4><p>其实就是英文「handle」的翻译，这个单词是「把手」的意思。本质上就是一个整数，用来表示某一个对象。“要控制哪个对象，就用哪一个把手”。在Windows编程中用得多，Unix编程中也称作文件描述符。</p><h4 id="文件描述符-file-descriptor" tabindex="-1"><a class="header-anchor" href="#文件描述符-file-descriptor"><span><strong>文件描述符（file descriptor）</strong></span></a></h4><p>跟句柄一样也是一个整数，概念上差不多。文件描述符其实就是用一个整数来表示一个文件。可以通过这个整数找到这个文件。</p><h4 id="缺省-default" tabindex="-1"><a class="header-anchor" href="#缺省-default"><span><strong>缺省（default）</strong></span></a></h4><p>等同于默认。</p><h4 id="进程-process" tabindex="-1"><a class="header-anchor" href="#进程-process"><span><strong>进程（Process）</strong></span></a></h4><p>可以简单理解为正在运行的程序，由操作系统控制。</p><h4 id="线程-thread" tabindex="-1"><a class="header-anchor" href="#线程-thread"><span><strong>线程（Thread）</strong></span></a></h4><p>一个进程内部可能有多个控制流（比如一个Web服务器可以同时接收处理两个用户的请求），通常这样一个控制流就是一个线程。线程是操作系统调度的最小单位。</p><h4 id="并发-concurrence" tabindex="-1"><a class="header-anchor" href="#并发-concurrence"><span><strong>并发（Concurrence）</strong></span></a></h4>',16)),a("p",null,[e[1]||(e[1]=n("宏观上同时执行，但微观上多个事件在时间间隔内（交替）发生。参考 ")),s(r,{to:"/computer-system/5594p91o/"},{default:t(()=>e[0]||(e[0]=[n("操作系统漫游")])),_:1})]),e[9]||(e[9]=o('<h4 id="并行-parallel" tabindex="-1"><a class="header-anchor" href="#并行-parallel"><span><strong>并行（Parallel）</strong></span></a></h4><p>真正的同时执行。</p><h4 id="base64编码" tabindex="-1"><a class="header-anchor" href="#base64编码"><span><strong>base64编码</strong></span></a></h4><p>将二进制数据转成对应的文本数据的方法。在处理文本数据的场景中，用于表示、传输、存储一些二进制数据。广泛用于Web开发，例如将图片转成base64字符串，这样可以少发起一次http请求。</p><p>base64 用 6个 bit 来表示一个字符，总共有 2^6 = 64 种表示, 所以 base64 编码会有64个基础字符。</p><blockquote><p>编码规则：3个字节为一组, 转化为4个字符表示</p></blockquote><h4 id="hex编码" tabindex="-1"><a class="header-anchor" href="#hex编码"><span><strong>Hex编码</strong></span></a></h4><p>同样也是将二进制数据转成对应的文本数据的方法。但常用于安全领域（加解密）。</p><p>Hex 用 4个 bit 表示一个字符，即16进制表示。</p><blockquote><p>编码规则：1个字节为一组, 转为2个字符表示</p></blockquote><hr><h3 id="web开发" tabindex="-1"><a class="header-anchor" href="#web开发"><span><strong>Web开发</strong></span></a></h3><h4 id="base64url" tabindex="-1"><a class="header-anchor" href="#base64url"><span><strong>base64url</strong></span></a></h4><p>将base64字符串放在url中进行传输，因为url中不能带有特殊字符，因此去除尾部的<code>=</code>，把 <code>+</code> 替换成 <code>-</code>、把 <code>/</code> 替换成 <code>_</code>。</p><h4 id="spa-single-page-application" tabindex="-1"><a class="header-anchor" href="#spa-single-page-application"><span><strong>SPA（Single-page Application）</strong></span></a></h4><p>单页面应用。</p><h4 id="seo-search-engine-optimization" tabindex="-1"><a class="header-anchor" href="#seo-search-engine-optimization"><span><strong>SEO（Search Engine Optimization）</strong></span></a></h4><p>搜索引擎优化。利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。一般前后端分离的动态网站，就不利于SEO。</p><h4 id="sso-single-sign-on" tabindex="-1"><a class="header-anchor" href="#sso-single-sign-on"><span><strong>SSO（Single Sign On）</strong></span></a></h4><p>单点登录。在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。而无需重复登录。</p><h4 id="soa-service-oriented-architecture" tabindex="-1"><a class="header-anchor" href="#soa-service-oriented-architecture"><span><strong>SOA（Service-oriented architecture）</strong></span></a></h4><p>面向服务的架构。</p><h4 id="jwt-json-web-token" tabindex="-1"><a class="header-anchor" href="#jwt-json-web-token"><span><strong>JWT（JSON Web Token）</strong></span></a></h4>',23)),a("p",null,[e[3]||(e[3]=n("本质是加密的 JSON 串，主要用来解决跨域用户认证问题。可参考 ")),s(r,{to:"/java/dw96t2an/"},{default:t(()=>e[2]||(e[2]=[n("使用 JWT 进行认证")])),_:1})]),e[10]||(e[10]=a("hr",null,null,-1)),e[11]||(e[11]=a("h3",{id:"编程",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#编程"},[a("span",null,[a("strong",null,"编程")])])],-1)),e[12]||(e[12]=a("h4",{id:"指针-point",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#指针-point"},[a("span",null,[a("strong",null,"指针（point）")])])],-1)),a("p",null,[e[5]||(e[5]=n("一种指向其他数据结构的数据结构。本质是表示内存地址的整数。可参考 ")),s(r,{to:"/article/i1f5bbc3/"},{default:t(()=>e[4]||(e[4]=[n("C/C++语言中的指针")])),_:1})]),e[13]||(e[13]=a("h4",{id:"协程-coroutine",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#协程-coroutine"},[a("span",null,[a("strong",null,"协程（coroutine）")])])],-1)),e[14]||(e[14]=a("p",null,"简单地理解，就是应用级线程。可以由应用程序自己控制和调度的执行流，但本质上脱离不了操作系统的线程。",-1)),e[15]||(e[15]=a("h4",{id:"cas-compare-and-swap",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cas-compare-and-swap"},[a("span",null,[a("strong",null,"CAS（compare-and-swap）")])])],-1)),a("p",null,[e[7]||(e[7]=n("一种非阻塞并发算法。参考 ")),s(r,{to:"/java/m1ui1dlh/"},{default:t(()=>e[6]||(e[6]=[n("Java并发编程之并发工具")])),_:1})]),e[16]||(e[16]=o('<h4 id="闭包-closure" tabindex="-1"><a class="header-anchor" href="#闭包-closure"><span><strong>闭包（closure）</strong></span></a></h4><p>在函数中定义另一函数，内部函数可以引用外部函数的参数和局部变量。当外部函数返回内部函数时，相关的参数和变量都保存在返回的内部函数中。这种程序结构，称为闭包。</p><hr><h3 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程"><span><strong>异步编程</strong></span></a></h3><h4 id="promise-和-future" tabindex="-1"><a class="header-anchor" href="#promise-和-future"><span><strong>Promise 和 Future</strong></span></a></h4><p>不同的编程语言中，Promise 和 Future 的概念可能有差异。总的来说，Promise 正如这个单词的英文本意「承诺」，可以理解为“承诺将来会执行”的对象，针对的是写入。而 Future 指一个只读的值的容器，这个值可能立即可用，也可能在未来某个时间可用，针对的是读取。每个 Promise 关联一个 Future，对 Promise 的写入会令 Future 的值可用。</p><p>（以上解释参考了<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="noopener noreferrer">廖雪峰的javascript教程</a> 和 <a href="https://fuzhe1989.github.io/2018/01/30/future-promise/" target="_blank" rel="noopener noreferrer">Fu Zhe&#39;s Blog 的 Future 与 Promise</a>，推荐阅读）</p><h4 id="callback" tabindex="-1"><a class="header-anchor" href="#callback"><span><strong>callback</strong></span></a></h4><p>回调。即被调用方执行结束后，通过调用某个方法的方式，将结果告诉原调用方。</p><h4 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await"><span><strong>async/await</strong></span></a></h4><p>部分编程语言中的语法糖。async 表明可异步执行，await 会等待 Future 结束，返回 Future 的值，将异步转成同步。</p><p>好处是语法上把异步编程的 callback 和 Promise，用接近于同步编程的习惯编写。</p><h4 id="monad" tabindex="-1"><a class="header-anchor" href="#monad"><span><strong>Monad</strong></span></a></h4><p>Monad 的概念最初来源于范畴论，在编程界中多见于函数式编程。</p><p>我看了不少文章，发现很难对Monad下一个精确的定义，建议参考下面文章并花上几天时间慢慢意会：</p><ul><li><a href="https://www.infoq.cn/article/understanding-monads-guide-for-perplexed" target="_blank" rel="noopener noreferrer">理解 Monad，一份 monad 的解惑指南</a></li><li><a href="https://www.jianshu.com/p/cf28f2e5a905" target="_blank" rel="noopener noreferrer">什么是 Monad (Functional Programming)？</a></li><li><a href="https://netcan.github.io/2020/09/30/%E8%AF%A6%E8%A7%A3%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8BMonad/" target="_blank" rel="noopener noreferrer">详解函数式编程之 Monad</a></li><li><a href="https://www.zhihu.com/question/19635359" target="_blank" rel="noopener noreferrer">什么是 Monad (Functional Programming)？</a></li></ul><hr><h3 id="信息安全" tabindex="-1"><a class="header-anchor" href="#信息安全"><span><strong>信息安全</strong></span></a></h3><h4 id="肉鸡" tabindex="-1"><a class="header-anchor" href="#肉鸡"><span><strong>肉鸡</strong></span></a></h4><p>指被黑客远程控制的机器，黑客可以随意操纵它并利用它做任何事情。通常被用作DDOS攻击。</p><h4 id="对称-非对称加密" tabindex="-1"><a class="header-anchor" href="#对称-非对称加密"><span><strong>对称/非对称加密</strong></span></a></h4><p>对称加密（symmetric key cryptography）指的是加解密都用同一个密钥的方式。</p><p>非对称加密（asymmetric key cryptography）有公钥和私钥之分，加密和解密不是同一个密钥。</p><hr><h3 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络"><span><strong>计算机网络</strong></span></a></h3><h4 id="wan" tabindex="-1"><a class="header-anchor" href="#wan"><span><strong>WAN</strong></span></a></h4><p>广域网。</p><h4 id="lan" tabindex="-1"><a class="header-anchor" href="#lan"><span><strong>LAN</strong></span></a></h4><p>局域网。</p><h4 id="vlan" tabindex="-1"><a class="header-anchor" href="#vlan"><span><strong>VLAN</strong></span></a></h4><p>虚拟局域网。可以理解为在软件层面抽象出来的局域网，这样，同一个子网下面可以有多组 VLAN，就像有多个局域网一样。</p><h4 id="mesh" tabindex="-1"><a class="header-anchor" href="#mesh"><span><strong>MESH</strong></span></a></h4><p>组网。例如我们说用多个路由器组MESH，解决无线网络覆盖死角问题。跟桥接、无线中继不是一回事。</p><hr><h3 id="软件工程" tabindex="-1"><a class="header-anchor" href="#软件工程"><span><strong>软件工程</strong></span></a></h3><h4 id="ioc-inversion-of-control" tabindex="-1"><a class="header-anchor" href="#ioc-inversion-of-control"><span><strong>IoC（Inversion of Control）</strong></span></a></h4><p>控制反转，一种依赖倒置原则的编程设计思想。<strong>依赖注入（Dependency Inject，DI）</strong> 是Ioc思想的一种具体做法。DI把底层类作为参数传给上层，实现上层对下层的控制。</p><h4 id="oop-object-oriented-program" tabindex="-1"><a class="header-anchor" href="#oop-object-oriented-program"><span><strong>OOP（Object Oriented Program）</strong></span></a></h4><p>面向对象编程。</p><h4 id="aop-aspect-oriented-program" tabindex="-1"><a class="header-anchor" href="#aop-aspect-oriented-program"><span><strong>AOP（Aspect Oriented Program）</strong></span></a></h4><p>面向切面编程。</p><h4 id="ddd-domain-driven-design" tabindex="-1"><a class="header-anchor" href="#ddd-domain-driven-design"><span><strong>DDD（Domain-driven Design）</strong></span></a></h4><p>领域驱动设计。</p><h4 id="tdd-test-driven-design" tabindex="-1"><a class="header-anchor" href="#tdd-test-driven-design"><span><strong>TDD（Test-driven Design）</strong></span></a></h4><p>测试驱动设计。</p><hr><h3 id="数据库领域" tabindex="-1"><a class="header-anchor" href="#数据库领域"><span><strong>数据库领域</strong></span></a></h3><h4 id="oltp-online-transaction-processing" tabindex="-1"><a class="header-anchor" href="#oltp-online-transaction-processing"><span><strong>OLTP(Online Transaction Processing)</strong></span></a></h4><p>在线事务处理，主要指对数据库中的数据进行增删改查，实时性高。</p><h4 id="olap-online-analytical-processing" tabindex="-1"><a class="header-anchor" href="#olap-online-analytical-processing"><span><strong>OLAP(Online Analytical processing)</strong></span></a></h4><p>在线分析处理，指通过分析数据库中的数据来得出一些结论性的东西，如报表。</p><hr><h3 id="计算机硬件" tabindex="-1"><a class="header-anchor" href="#计算机硬件"><span><strong>计算机硬件</strong></span></a></h3><h4 id="hdd-hard-disk-drive" tabindex="-1"><a class="header-anchor" href="#hdd-hard-disk-drive"><span><strong>HDD（Hard Disk Drive）</strong></span></a></h4><p>机械硬盘</p><h4 id="ssd-solid-state-drive" tabindex="-1"><a class="header-anchor" href="#ssd-solid-state-drive"><span><strong>SSD（Solid State Drive）</strong></span></a></h4><p>固态硬盘</p><h4 id="raid-redundant-array-of-independent-disks" tabindex="-1"><a class="header-anchor" href="#raid-redundant-array-of-independent-disks"><span><strong>RAID（Redundant Array of Independent Disks）</strong></span></a></h4><p>用多个独立的磁盘组成在一起形成一个大的磁盘系统，从而实现比单块磁盘更好的存储性能和更高的可靠性</p><ul><li>RAID0：N块硬盘，将数据分成N份，并发读写，很快但不可靠</li><li>RAID1：2块硬盘，数据分别写一次，相当于备份</li><li>RAID5：N块磁盘（N&gt;=3），将数据分成N份，并发写，同时还将数据的校验码信息也写入到这N块磁盘中（一旦某一块磁盘损坏了，就可以用剩下的数据和对应的奇偶校验码信息去恢复损坏的数据）</li><li>RAID6：在RAID5的基础上，引入双重校验，数据的冗余性高，读好写差，用得少</li><li>RAID10：RAID1与RAID0的合体，保障数据的同时读写速度也快，冗余50%</li></ul><hr><h3 id="物联网" tabindex="-1"><a class="header-anchor" href="#物联网"><span><strong>物联网</strong></span></a></h3><h4 id="iot-internet-of-things" tabindex="-1"><a class="header-anchor" href="#iot-internet-of-things"><span><strong>IoT（Internet of things）</strong></span></a></h4><p>物联网。物理设备嵌入传感器、软件和其他技术后，可以通过互联网与其他设备建立连接并交换数据，这种联网系统就是物联网。区别于互联网的只限制计算机设备，物联网可以是任何物理设备，如空调、冰箱、体重秤等。</p><hr><h3 id="人工智能" tabindex="-1"><a class="header-anchor" href="#人工智能"><span><strong>人工智能</strong></span></a></h3><h4 id="nlp-natural-language-processing" tabindex="-1"><a class="header-anchor" href="#nlp-natural-language-processing"><span><strong>NLP（Natural language processing）</strong></span></a></h4><p>自然语言处理，一种机器学习技术，使计算机能够解读、处理和理解人类语言。</p><h4 id="gpt-generative-pre-trained-transformer" tabindex="-1"><a class="header-anchor" href="#gpt-generative-pre-trained-transformer"><span><strong>GPT（Generative Pre-trained Transformer）</strong></span></a></h4><p>一种深度学习预训练语言模型。基于大量语料数据上训练，生成类似于人类自然语言的文本。其应用如聊天机器人 ChatGPT。</p><h4 id="llm-large-language-model" tabindex="-1"><a class="header-anchor" href="#llm-large-language-model"><span>LLM（Large Language model）</span></a></h4><p>大语言模型，一种由大量的参数（十亿或更多）的神经网络组成的语言模型，使用无/半监督学习对大量样本进行训练。GPT是大语言模型的一种。</p><h4 id="aigc-artificial-intelligence-generated-content" tabindex="-1"><a class="header-anchor" href="#aigc-artificial-intelligence-generated-content"><span>AIGC（Artificial Intelligence Generated Content）</span></a></h4><p>使用人工智能根据用户输入的关键字或要求生成内容来辅助或替代手动内容生成。</p><hr><h3 id="互联网行业" tabindex="-1"><a class="header-anchor" href="#互联网行业"><span><strong>互联网行业</strong></span></a></h3><h4 id="ugc-user-generated-content" tabindex="-1"><a class="header-anchor" href="#ugc-user-generated-content"><span><strong>UGC（User Generated Content）</strong></span></a></h4><p>用户生成内容。一般用户将自己原创的内容通过互联网平台进行展示或者提供给其他用户。</p><h4 id="pgc-professional-generated-content" tabindex="-1"><a class="header-anchor" href="#pgc-professional-generated-content"><span><strong>PGC（Professional Generated Content）</strong></span></a></h4><p>专业生产内容。跟UGC的区别是，PGC是由专业用户创造内容。</p><h4 id="mcn-multi-channel-network" tabindex="-1"><a class="header-anchor" href="#mcn-multi-channel-network"><span><strong>MCN（Multi-Channel Network）</strong></span></a></h4><p>为自媒体提供内容策划、宣传推广、粉丝管理、签约代理等服务的机构。</p>',82))])}const f=i(h,[["render",c],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/article/nnftqvbz/","title":"计算机术语速查手册","lang":"zh-CN","frontmatter":{"title":"计算机术语速查手册","categories":["计算机","杂文"],"abbrlink":"d477930b","createTime":"2022/10/23 15:04:31","permalink":"/article/nnftqvbz/","description":"工作中时常会遇到产品或其他同学询问一些计算机术语，例如上次有个开发跟我对接某接口时，说给我传输了图片的 「base64编码」串，我需要先解码后使用... 我当然可以很熟练地在封装好的代码中直接输入Base64.getDecoder().decode(encodedString) 顺利交差，但是话说回来，base64到底是个啥玩意？如果遇到一个产品同学过...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/nnftqvbz/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"计算机术语速查手册"}],["meta",{"property":"og:description","content":"工作中时常会遇到产品或其他同学询问一些计算机术语，例如上次有个开发跟我对接某接口时，说给我传输了图片的 「base64编码」串，我需要先解码后使用... 我当然可以很熟练地在封装好的代码中直接输入Base64.getDecoder().decode(encodedString) 顺利交差，但是话说回来，base64到底是个啥玩意？如果遇到一个产品同学过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机术语速查手册\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"计算机基础","slug":"计算机基础","link":"#计算机基础","children":[]},{"level":3,"title":"Web开发","slug":"web开发","link":"#web开发","children":[]},{"level":3,"title":"编程","slug":"编程","link":"#编程","children":[]},{"level":3,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[]},{"level":3,"title":"信息安全","slug":"信息安全","link":"#信息安全","children":[]},{"level":3,"title":"计算机网络","slug":"计算机网络","link":"#计算机网络","children":[]},{"level":3,"title":"软件工程","slug":"软件工程","link":"#软件工程","children":[]},{"level":3,"title":"数据库领域","slug":"数据库领域","link":"#数据库领域","children":[]},{"level":3,"title":"计算机硬件","slug":"计算机硬件","link":"#计算机硬件","children":[]},{"level":3,"title":"物联网","slug":"物联网","link":"#物联网","children":[]},{"level":3,"title":"人工智能","slug":"人工智能","link":"#人工智能","children":[]},{"level":3,"title":"互联网行业","slug":"互联网行业","link":"#互联网行业","children":[]}],"readingTime":{"minutes":8.47,"words":2542},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/skill/计算机术语速查手册.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"8dc06f","sort":10013,"name":"skill"}]}');export{f as comp,b as data};
