import{_ as i,c as a,f as e,o as n}from"./app-D22ydJtp.js";const l={};function t(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="微内核和宏内核" tabindex="-1"><a class="header-anchor" href="#微内核和宏内核"><span>微内核和宏内核</span></a></h1><h2 id="微内核" tabindex="-1"><a class="header-anchor" href="#微内核"><span>微内核</span></a></h2><p>内核中只有最基本的调度、内存管理。其他的比如驱动、文件系统等都是用户态的守护进程去实现的。比如Windows NT、OS X</p><p>优点是超级稳定，驱动等的错误只会导致相应进程死掉，不会导致整个系统都崩溃，做驱动开发时，发现错误，只需要kill掉进程，修正后重启进程就行了，比较方便。</p><p>缺点是效率低。典型代表QNX，QNX的文件系统是跑在用户态的进程，称为resmgr的东西，是订阅发布机制，文件系统的错误只会导致这个守护进程挂掉。</p><h2 id="宏内核" tabindex="-1"><a class="header-anchor" href="#宏内核"><span>宏内核</span></a></h2><p>简单来说，就是把很多东西都集成进内核，例如Linux内核，除了最基本的进程、线程管理、内存管理外，文件系统，驱动，网络协议等等都在内核里面。优点是效率高。缺点是稳定性差，开发过程中的bug经常会导致整个系统挂掉。做驱动开发的应该经常有按电源键强行关机的经历。</p><hr><h1 id="内核模块" tabindex="-1"><a class="header-anchor" href="#内核模块"><span>内核模块</span></a></h1><p>由于 Linux 内核是宏内核，集成性比较高，随着内核版本的迭代，内核变得非常大（Linux内核约50M），我们想定制自己的内核时，需要整个重新编译，比较繁琐。而且，定制内核时，有些功能我们是不需要的。</p><p>因此 Linux 内核采用了模块化的方式。当我们编译内核时，可以只选择我们需要的模块。而且，我们自己编写的模块，可以采用安装/卸载的方式，集成到内核里。</p><p>内核模块的优点是：开发效率更高，而且可以在内核运行时<code>动态加载</code>。由于Linux内核模块是动态加载的，所以它也叫<code>可加载内核模块(Loadable Kernel Module, LKM)</code>。Linux内核镜像位于/boot目录下，启动时最先加载，LKM总是在内核启动之后加载。</p><p>LKM主要用于：设备驱动、文件系统驱动和系统调用。</p><ul><li><strong>注意</strong>：LKM是内核空间程序，不是用户空间程序，你可以把它看成是内核的一部分。也就是LKM没有任何保护，一不小心可能就会导致系统崩溃。</li></ul><hr><h1 id="编译lkm" tabindex="-1"><a class="header-anchor" href="#编译lkm"><span>编译LKM</span></a></h1><h2 id="安装c编译器和linux内核头文件" tabindex="-1"><a class="header-anchor" href="#安装c编译器和linux内核头文件"><span>安装C编译器和Linux内核头文件</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sudo apt-get install build-essential linux-headers-$(uname -r)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="hello-world内核模块代码-hello-c" tabindex="-1"><a class="header-anchor" href="#hello-world内核模块代码-hello-c"><span>Hello World内核模块代码（hello.c）</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">linux/module.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     /* 模块头文件，必不可少 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">linux/kernel.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     /* KERN_INFO在这里 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">linux/init.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       /* 使用的宏 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// LICENSE</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_LICENSE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">GPL</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 作者</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_AUTHOR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">blog.topspeedsnail.com</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 描述</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_DESCRIPTION</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello world</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 模块版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MODULE_VERSION</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3.14</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> __init </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">KERN_INFO </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello World</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> __exit </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hello_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    printk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">KERN_INFO </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Go to Hell</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">module_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello_start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">module_exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hello_end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>module_init</strong> 定义了模块的入口函数，在模块加载 insmoded (插入模块)时执行</li><li><strong>module_exit</strong> 定义了模块的退出函数，在模块卸载 rmmoded （移除模块）时执行</li></ul><h2 id="创建makefile" tabindex="-1"><a class="header-anchor" href="#创建makefile"><span>创建Makefile</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>obj-m = hello.o</span></span>
<span class="line"><span>all:</span></span>
<span class="line"><span>    make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules</span></span>
<span class="line"><span>clean:</span></span>
<span class="line"><span>    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</span></span>
<span class="line"><span># make命令前是tab，不是空格</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>make命令</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>jerrysheh@ubuntu:~/Desktop$ make</span></span>
<span class="line"><span>make -C /lib/modules/4.13.0-31-generic/build/ M=/home/jerrysheh/Desktop modules</span></span>
<span class="line"><span>make[1]: Entering directory &#39;/usr/src/linux-headers-4.13.0-31-generic&#39;</span></span>
<span class="line"><span>  CC [M]  /home/jerrysheh/Desktop/helloworld.o</span></span>
<span class="line"><span>  Building modules, stage 2.</span></span>
<span class="line"><span>  MODPOST 1 modules</span></span>
<span class="line"><span>  CC      /home/jerrysheh/Desktop/helloworld.mod.o</span></span>
<span class="line"><span>  LD [M]  /home/jerrysheh/Desktop/helloworld.ko</span></span>
<span class="line"><span>make[1]: Leaving directory &#39;/usr/src/linux-headers-4.13.0-31-generic&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看" tabindex="-1"><a class="header-anchor" href="#查看"><span>查看</span></a></h2><p>使用<code>modinfo hello.ko</code>来查看模块信息</p><p>使用<code>sudo insmod hello.ko</code>来加载模块到内核</p><p>使用<code>lsmod</code>来查看已加载的内核（结合管道<code>lsmod | grep hello</code>）</p><p>使用<code>sudo rmmod hello</code>来卸载模块</p><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h2><p>使用<code>tail /var/log/kern.log</code>来查看模块的输出</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>jerrysheh@ubuntu:~/Desktop$ tail /var/log/kern.log</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   gateway 192.168.224.2</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   server identifier 192.168.224.254</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   lease time 1800</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   nameserver &#39;192.168.224.2&#39;</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   domain name &#39;localdomain&#39;</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9770]   wins &#39;192.168.224.2&#39;</span></span>
<span class="line"><span>Mar  7 12:53:59 ubuntu NetworkManager[863]: &lt;info&gt;  [1520398439.9771] dhcp4 (ens33): state changed bound -&gt; bound</span></span>
<span class="line"><span>Mar  7 12:56:41 ubuntu kernel: [ 1170.100050] helloworld: loading out-of-tree module taints kernel.</span></span>
<span class="line"><span>Mar  7 12:56:41 ubuntu kernel: [ 1170.100085] helloworld: module verification failed: signature and/or required key missing - tainting kernel</span></span>
<span class="line"><span>Mar  7 12:56:41 ubuntu kernel: [ 1170.100760] Hello World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到最后一行输出了 Hello World，正是我们编写的 helloworld.ko 模块输出的。</p><p>可以使用<code>tail -f /var/log/kern.lo</code>来动态监控内核的输出</p><h2 id="作为字符型驱动" tabindex="-1"><a class="header-anchor" href="#作为字符型驱动"><span>作为字符型驱动</span></a></h2><p>在 insmod 的时候把设备的主设备号打印出来。</p><p>如果要把内核模块作为字符型驱动设备，首先</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>tail -f /var/log/messgaes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看设备的主设备号，比如是 254</p><p>然后创建目录和节点</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>mkdir /dev/demo</span></span>
<span class="line"><span>mknod /dev/demo/newdev c 254 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就创建了一个虚拟的字符型驱动设备。</p><hr><p>本文引用的文章：</p><ul><li><p><a href="http://blog.topspeedsnail.com/archives/10053" target="_blank" rel="noopener noreferrer">编写第一个Linux内核模块: Hello World</a></p></li><li><p><a href="http://blog.csdn.net/silencegll/article/details/51496158" target="_blank" rel="noopener noreferrer">宏内核与微内核、Linux内核与Unix内核的区别</a></p></li></ul>`,49)]))}const r=i(l,[["render",t],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/19h8p8i9/","title":"Linux内核模块编程 HelloWorld","lang":"zh-CN","frontmatter":{"title":"Linux内核模块编程 HelloWorld","comments":true,"categories":"Linux","tags":["Linux"],"abbrlink":"75b0adbf","createTime":"2018/03/07 13:03:26","permalink":"/article/19h8p8i9/","description":"微内核和宏内核 微内核 内核中只有最基本的调度、内存管理。其他的比如驱动、文件系统等都是用户态的守护进程去实现的。比如Windows NT、OS X 优点是超级稳定，驱动等的错误只会导致相应进程死掉，不会导致整个系统都崩溃，做驱动开发时，发现错误，只需要kill掉进程，修正后重启进程就行了，比较方便。 缺点是效率低。典型代表QNX，QNX的文件系统是跑...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/article/19h8p8i9/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"Linux内核模块编程 HelloWorld"}],["meta",{"property":"og:description","content":"微内核和宏内核 微内核 内核中只有最基本的调度、内存管理。其他的比如驱动、文件系统等都是用户态的守护进程去实现的。比如Windows NT、OS X 优点是超级稳定，驱动等的错误只会导致相应进程死掉，不会导致整个系统都崩溃，做驱动开发时，发现错误，只需要kill掉进程，修正后重启进程就行了，比较方便。 缺点是效率低。典型代表QNX，QNX的文件系统是跑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux内核模块编程 HelloWorld\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"微内核","slug":"微内核","link":"#微内核","children":[]},{"level":2,"title":"宏内核","slug":"宏内核","link":"#宏内核","children":[]},{"level":2,"title":"安装C编译器和Linux内核头文件","slug":"安装c编译器和linux内核头文件","link":"#安装c编译器和linux内核头文件","children":[]},{"level":2,"title":"Hello World内核模块代码（hello.c）","slug":"hello-world内核模块代码-hello-c","link":"#hello-world内核模块代码-hello-c","children":[]},{"level":2,"title":"创建Makefile","slug":"创建makefile","link":"#创建makefile","children":[]},{"level":2,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":2,"title":"查看","slug":"查看","link":"#查看","children":[]},{"level":2,"title":"输出","slug":"输出","link":"#输出","children":[]},{"level":2,"title":"作为字符型驱动","slug":"作为字符型驱动","link":"#作为字符型驱动","children":[]}],"readingTime":{"minutes":4.2,"words":1260},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/linux/Linux内核模块编程HelloWorld.md","categoryList":[{"id":"18958e","sort":10000,"name":"posts"},{"id":"decce4","sort":10015,"name":"linux"}]}');export{r as comp,h as data};
