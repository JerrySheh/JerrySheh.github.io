import{_ as t,c as i,f as a,o as l}from"./app-D22ydJtp.js";const r={};function s(n,e){return l(),i("div",null,e[0]||(e[0]=[a('<p>在多道程序环境下，系统需要按照某种算法，动态地将处理机分配给处于就绪状态的一个进程。分配处理机的任务，就由<code>处理机调度程序</code>来完成。</p><hr><h1 id="调度的层次" tabindex="-1"><a class="header-anchor" href="#调度的层次"><span>调度的层次</span></a></h1><h2 id="高级调度" tabindex="-1"><a class="header-anchor" href="#高级调度"><span>高级调度</span></a></h2><p>或者称<code>长程调度</code>或<code>作业调度</code>，在多道批处理系统中配置。分时、实时系统不需配置。</p><ul><li>外存（后备队列） -&gt; 内存（就绪队列）</li></ul><h2 id="低级调度" tabindex="-1"><a class="header-anchor" href="#低级调度"><span>低级调度</span></a></h2><p>或者称<code>短程调度</code>或<code>进程调度</code>，在多道批处理、分时、实时系统中，都必须配置这级调度。</p><ul><li>内存（就绪队列） -&gt; 处理机</li></ul><h2 id="中级调度" tabindex="-1"><a class="header-anchor" href="#中级调度"><span>中级调度</span></a></h2><p>或者称<code>内存调度</code>。目的是提高内存利用率和系统吞吐量。</p><ul><li>内存（暂时不能允许的进程） -&gt; 外存（swap分区）</li></ul><hr><h1 id="作业调度算法" tabindex="-1"><a class="header-anchor" href="#作业调度算法"><span>作业调度算法</span></a></h1><p>作业调度算法主要解决的是如何从外存后被队列中调入哪些进程到内存就绪队列中。</p><ul><li>周转时间 = 完成时间 - 到达时间</li><li>带权周转时间 = 周转时间/服务时间</li></ul><h2 id="先来先服务-first-come-first-served-fcfs" tabindex="-1"><a class="header-anchor" href="#先来先服务-first-come-first-served-fcfs"><span>先来先服务（first-come first-served，FCFS）</span></a></h2><ul><li>从后备队列中选择几个最先进入该队列的作业，调入内存。</li></ul><h2 id="短作业优先-short-job-first-sjf" tabindex="-1"><a class="header-anchor" href="#短作业优先-short-job-first-sjf"><span>短作业优先（short job first, SJF）</span></a></h2><ul><li>作业越短，优先级越高。</li></ul><h2 id="优先级调度算法-priority-scheduling-algorithm-psa" tabindex="-1"><a class="header-anchor" href="#优先级调度算法-priority-scheduling-algorithm-psa"><span>优先级调度算法（priority-scheduling algorithm, PSA）</span></a></h2><ul><li>基于紧迫性。</li></ul><h2 id="高响应比优先调度算法-hihest-response-ratio-next-hrrn" tabindex="-1"><a class="header-anchor" href="#高响应比优先调度算法-hihest-response-ratio-next-hrrn"><span>高响应比优先调度算法（Hihest Response Ratio Next, HRRN）</span></a></h2><ul><li>即考虑作业的等待时间，又兼顾作业运行时间。这样，照顾了短作业又不至于让长作业等待时间过长。</li></ul><p>其实现是为每个作业引入一个动态优先级，优先级随着等待时间延长而增加。</p><p>优先权 = （等待时间+要求服务时间） / 要求服务时间</p><hr><h1 id="进程调度算法" tabindex="-1"><a class="header-anchor" href="#进程调度算法"><span>进程调度算法</span></a></h1><ul><li><strong>轮转调度算法（round robin, RR）</strong>：按照时间片</li><li><strong>优先级调度算法</strong>：按照紧迫性</li><li><strong>多队列调度算法</strong></li><li><strong>多级反馈队列的调度算法</strong></li><li><strong>基于公平原则的调度算法</strong></li></ul><hr><h1 id="实时调度算法" tabindex="-1"><a class="header-anchor" href="#实时调度算法"><span>实时调度算法</span></a></h1><p>抢占式和非抢占式</p><h2 id="最低松弛度优先-least-laxity-first-算法" tabindex="-1"><a class="header-anchor" href="#最低松弛度优先-least-laxity-first-算法"><span>最低松弛度优先（Least Laxity First）算法</span></a></h2><p>松弛度 = 完成截止时间 - 运行时间 - 当前时刻</p><hr><h1 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h1><p>死锁指的是，两个或多个进程都持有一些资源，但又想申请对方拥有的资源，双方都希望对方释放出自己所需的资源，导致僵持的一种状态。</p><p>《计算机操作系统》（第四版）对死锁的定义是：</p><blockquote><p>如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的（Deadlock）。</p></blockquote><p>死锁的起因通常是进程推进顺序非法，导致多个进程对资源的争夺。（包括对不可抢占式资源和可消耗资源的争夺）</p><h2 id="死锁的必要条件" tabindex="-1"><a class="header-anchor" href="#死锁的必要条件"><span>死锁的必要条件</span></a></h2><ul><li>互斥条件</li><li>请求和保持条件 （进程已经获得某个资源，又要申请另一资源）</li><li>不可抢占条件 （进程获得的资源在未使用完之前不能被其他进程抢占）</li><li>循环等待条件</li></ul><h2 id="死锁的检测" tabindex="-1"><a class="header-anchor" href="#死锁的检测"><span>死锁的检测</span></a></h2><p>采用<strong>资源分配图</strong>简化算法。</p><p>资源分配图中，找出一个既不阻塞又非独立的进程结点Pi，在顺利的情况下，Pi可获得所需资源而继续运行，直至运行完毕，将所有请求边删去，成为孤立结点。Pi释放资源后，P(i+1)获得资源继续运行。以此类推，如果到最后所有的结点都成为孤立结点，那么该图是可完全化简的。不会导致死锁。</p><p>同样可以证明：</p><blockquote><p>S为死锁的充分条件是，当且仅当S状态的资源分配图是不可完全化简的。（死锁定理）</p></blockquote><h2 id="处理死锁的方法" tabindex="-1"><a class="header-anchor" href="#处理死锁的方法"><span>处理死锁的方法</span></a></h2><ul><li>预防死锁</li><li>避免死锁</li><li>检测死锁</li><li>解除死锁</li></ul><h3 id="预防死锁的两种协议" tabindex="-1"><a class="header-anchor" href="#预防死锁的两种协议"><span>预防死锁的两种协议</span></a></h3><ul><li>协议一：进程一开始就一次性申请整个运行过程所需的全部资源。（会导致资源浪费）</li><li>协议二：申请 -&gt; 释放 -&gt; 申请 -&gt; 释放</li></ul><p>除了两种协议之外，还可以破坏“不可抢占”这个必要条件，例如，提出新的资源请求而不能得到满足时，必须释放已经保持的所有资源。</p><h3 id="避免死锁" tabindex="-1"><a class="header-anchor" href="#避免死锁"><span>避免死锁</span></a></h3><p>当系统处于安全状态时，就可以避免死锁。所谓安全状态，就是系统能按照某种进程推进顺序为每个进程分配其所需资源，直至满足每个进程对资源的最大需求，使每个进程都可顺利地完成。</p><p>可以用<code>银行家算法</code>来避免死锁。</p><blockquote><p>当每一个进程在进入系统时，必须先申明运行过程中可能需要的每种资源类型的最大单元数目。当进程请求一组资源时，系统必须首先确定是否有足够的资源分配给它。若有，计算分配后是否会让系统处于不安全状态，如果不会，才将资源分配给它。</p></blockquote>',56)]))}const h=t(r,[["render",s],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/computer-system/g8mlnoct/","title":"操作系统漫游（三）处理机调度和死锁","lang":"zh-CN","frontmatter":{"title":"操作系统漫游（三）处理机调度和死锁","comments":true,"categories":"操作系统","tags":["操作系统"],"abbrlink":"cec034a9","createTime":"2018/04/13 12:42:27","permalink":"/computer-system/g8mlnoct/","description":"在多道程序环境下，系统需要按照某种算法，动态地将处理机分配给处于就绪状态的一个进程。分配处理机的任务，就由处理机调度程序来完成。 调度的层次 高级调度 或者称长程调度或作业调度，在多道批处理系统中配置。分时、实时系统不需配置。 外存（后备队列） -> 内存（就绪队列） 低级调度 或者称短程调度或进程调度，在多道批处理、分时、实时系统中，都必须配置这级调...","head":[["meta",{"property":"og:url","content":"https://jerrysheh.com/computer-system/g8mlnoct/"}],["meta",{"property":"og:site_name","content":"Jerry"}],["meta",{"property":"og:title","content":"操作系统漫游（三）处理机调度和死锁"}],["meta",{"property":"og:description","content":"在多道程序环境下，系统需要按照某种算法，动态地将处理机分配给处于就绪状态的一个进程。分配处理机的任务，就由处理机调度程序来完成。 调度的层次 高级调度 或者称长程调度或作业调度，在多道批处理系统中配置。分时、实时系统不需配置。 外存（后备队列） -> 内存（就绪队列） 低级调度 或者称短程调度或进程调度，在多道批处理、分时、实时系统中，都必须配置这级调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-20T05:02:32.000Z"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:modified_time","content":"2024-10-20T05:02:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统漫游（三）处理机调度和死锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-20T05:02:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"高级调度","slug":"高级调度","link":"#高级调度","children":[]},{"level":2,"title":"低级调度","slug":"低级调度","link":"#低级调度","children":[]},{"level":2,"title":"中级调度","slug":"中级调度","link":"#中级调度","children":[]},{"level":2,"title":"先来先服务（first-come first-served，FCFS）","slug":"先来先服务-first-come-first-served-fcfs","link":"#先来先服务-first-come-first-served-fcfs","children":[]},{"level":2,"title":"短作业优先（short job first, SJF）","slug":"短作业优先-short-job-first-sjf","link":"#短作业优先-short-job-first-sjf","children":[]},{"level":2,"title":"优先级调度算法（priority-scheduling algorithm, PSA）","slug":"优先级调度算法-priority-scheduling-algorithm-psa","link":"#优先级调度算法-priority-scheduling-algorithm-psa","children":[]},{"level":2,"title":"高响应比优先调度算法（Hihest Response Ratio Next, HRRN）","slug":"高响应比优先调度算法-hihest-response-ratio-next-hrrn","link":"#高响应比优先调度算法-hihest-response-ratio-next-hrrn","children":[]},{"level":2,"title":"最低松弛度优先（Least Laxity First）算法","slug":"最低松弛度优先-least-laxity-first-算法","link":"#最低松弛度优先-least-laxity-first-算法","children":[]},{"level":2,"title":"死锁的必要条件","slug":"死锁的必要条件","link":"#死锁的必要条件","children":[]},{"level":2,"title":"死锁的检测","slug":"死锁的检测","link":"#死锁的检测","children":[]},{"level":2,"title":"处理死锁的方法","slug":"处理死锁的方法","link":"#处理死锁的方法","children":[{"level":3,"title":"预防死锁的两种协议","slug":"预防死锁的两种协议","link":"#预防死锁的两种协议","children":[]},{"level":3,"title":"避免死锁","slug":"避免死锁","link":"#避免死锁","children":[]}]}],"readingTime":{"minutes":4.45,"words":1336},"git":{"createdTime":1729400552000,"updatedTime":1729400552000,"contributors":[{"name":"jerrysheh","email":"jerrysheh@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/computer-system/5.操作系统漫游（三）处理机调度和死锁.md"}');export{h as comp,c as data};
